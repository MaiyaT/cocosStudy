{
  "version": 3,
  "sources": [
    "unknown"
  ],
  "names": [
    "BoxDrop",
    "require",
    "BoxItem",
    "BoxState",
    "Game_State",
    "BoxType",
    "cc",
    "Class",
    "extends",
    "Component",
    "properties",
    "box_prefab",
    "default",
    "type",
    "Prefab",
    "num_rank",
    "tooltip",
    "num_row",
    "super_node",
    "Node",
    "_gameState",
    "Start",
    "gamestate",
    "get",
    "set",
    "value",
    "tempBefore",
    "Play",
    "updateAllBeginOriginY",
    "Filling",
    "fillInterval",
    "createBarrierCanvas",
    "onLoad",
    "Array",
    "prototype",
    "removeByValue",
    "arr",
    "val",
    "i",
    "length",
    "splice",
    "rankList",
    "itemWidth",
    "itemHeight",
    "itemSpace",
    "margin_top",
    "height",
    "margin_bottom",
    "margin_left",
    "margin_right",
    "boxPool",
    "NodePool",
    "listBarrier",
    "replayGame",
    "children",
    "boxDrop_destroy",
    "getComponent",
    "item",
    "shift",
    "console",
    "log",
    "index",
    "createRankContent",
    "checkPanelEliminatable",
    "barrierList",
    "sort",
    "a",
    "b",
    "row",
    "forEach",
    "ele",
    "list",
    "rank",
    "box",
    "undefined",
    "box_c",
    "push",
    "boxSpeciallyShow",
    "Barrier",
    "bind",
    "num_b",
    "boxItem",
    "color_type",
    "TypeCount",
    "Blank",
    "blankBeginFill",
    "listBlank",
    "b_i",
    "b_j",
    "boxa",
    "boxb",
    "blankAviableFillItem",
    "blank_box",
    "box_top",
    "box_topLeft",
    "box_topRight",
    "box_re",
    "blankReplaceBox",
    "boxBlank",
    "boxReplace",
    "box_bl",
    "lastPoint",
    "ani_point",
    "isleft",
    "begin_x",
    "x",
    "end_y",
    "node",
    "haveTop",
    "blankRemoveItemAtRank",
    "tempEndy",
    "tempRow",
    "tempRank",
    "resetOriginPos",
    "put",
    "boxRemove",
    "new_box",
    "updateRankEndYIndex",
    "y",
    "begin_y",
    "last_box",
    "space_top",
    "state_b",
    "EFalling",
    "EFalled",
    "rank_list",
    "origin_x",
    "boxDrop_get",
    "active",
    "width",
    "ENormal",
    "initBoxItem",
    "count",
    "random0To1",
    "parent",
    "updateAllRankEndY",
    "createBox",
    "list_sub",
    "end_box_y",
    "item_box",
    "off_top",
    "j",
    "exchangeBoxItem",
    "box1",
    "box2",
    "toCheckViable",
    "boxItem1",
    "boxItem2",
    "temp_endy",
    "runAction",
    "moveTo",
    "p",
    "temp_row",
    "temp_node",
    "list1",
    "list2",
    "temp_beginx",
    "temp_rank",
    "row_index",
    "isViable",
    "setTimeout",
    "wipe_list",
    "tempList",
    "pre_box",
    "item_pre",
    "toAdd",
    "apply",
    "isRepeatItemInWipe",
    "id",
    "elem",
    "showDelayAnimation",
    "schedule",
    "EDestroy",
    "size",
    "instantiate",
    "init",
    "gameShowDebugMessage",
    "YHDebug",
    "update",
    "dt",
    "self",
    "box_c_i"
  ],
  "mappings": "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",
  "file": "unknown",
  "sourcesContent": [
    "\r\n\r\nvar BoxDrop = require(\"BoxDrop\");\r\nvar BoxItem = require(\"BoxItem\");\r\nvar BoxState = require(\"States\").BoxState;\r\nvar Game_State = require(\"States\").Game_State;\r\nvar BoxType = require(\"States\").BoxType;\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n\r\n        box_prefab:{\r\n            default:null,\r\n            type:cc.Prefab,\r\n        },\r\n\r\n        num_rank:{\r\n            default:10,\r\n            tooltip:\"列数\"\r\n        },\r\n\r\n        num_row:{\r\n            default:10,\r\n            tooltip:\"行数\"\r\n        },\r\n\r\n        super_node:{\r\n            default:null,\r\n            type:cc.Node,\r\n        },\r\n\r\n        _gameState:{\r\n            default:Game_State.Start,\r\n            type:Game_State,\r\n        },\r\n\r\n        gamestate:{\r\n            get:function () {\r\n                return this._gameState;\r\n            },\r\n            set:function (value) {\r\n\r\n                if(this._gameState !== value){\r\n\r\n                    let tempBefore = this._gameState;\r\n\r\n                    this._gameState = value;\r\n\r\n                    if(value === Game_State.Play){\r\n                        //开始掉落\r\n                        this.updateAllBeginOriginY();\r\n                    }else  if(value === Game_State.Filling){\r\n                        this.fillInterval = 0;\r\n                    }\r\n\r\n\r\n                    if(tempBefore === Game_State.Start){\r\n                        //是刚实例游戏完之后\r\n                        //创建障碍物\r\n                        this.createBarrierCanvas();\r\n                    }\r\n\r\n                }\r\n            },\r\n            type:Game_State\r\n        },\r\n\r\n    },\r\n\r\n    // use this for initialization\r\n    onLoad: function () {\r\n\r\n        Array.prototype.removeByValue = function(arr,val){\r\n\r\n            for (var i = 0; i<arr.length; i++){\r\n                if(arr[i] === val){\r\n                    arr.splice(i,1);\r\n                    break;\r\n                }\r\n            }\r\n        };\r\n\r\n\r\n        // Array.prototype.filterRepeat = function(){  \r\n        //     //直接定义结果数组  \r\n        //     var arr = [];\r\n        //     if(arr.length > 0){\r\n        //         arr.push(this[0]);\r\n        //     }\r\n\r\n        //     for(var i = 1; i < this.length; i++){    //从数组第二项开始循环遍历此数组  \r\n        //         //对元素进行判断：  \r\n        //         //如果数组当前元素在此数组中第一次出现的位置不是i  \r\n        //         //那么我们可以判断第i项元素是重复的，否则直接存入结果数组  \r\n        //         if(this.indexOf(this[i]) == i){  \r\n        //             arr.push(this[i]);  \r\n        //         }  \r\n        //     }  \r\n        //     return arr;  \r\n        // }  \r\n\r\n        this.rankList = [];\r\n\r\n        this.itemWidth = 100;\r\n        this.itemHeight = 100;\r\n\r\n        this.itemSpace = 5;\r\n\r\n        //this.margin_top = -(cc.director.getWinSize().height)*0.5 + this.itemHeight*this.num_row + this.itemSpace * (this.num_row - 1) + this.itemHeight*0.5;\r\n        //this.margin_bottom = -(cc.director.getWinSize().height)*0.5 - this.itemHeight*0.5;\r\n\r\n        this.margin_top = -(this.super_node.height)*0.5 + this.itemHeight*this.num_row + this.itemSpace * (this.num_row - 1) + this.itemHeight*0.5;\r\n        this.margin_bottom = -(this.super_node.height)*0.5 +  this.itemHeight*0.5;\r\n\r\n        this.margin_left =  -this.itemWidth*this.num_rank*0.5 + this.itemSpace*(this.num_rank*0.5-1);\r\n        this.margin_right = this.itemWidth * this.num_rank * 0.5 - this.itemSpace * (this.num_rank * 0.5 - 1);\r\n\r\n        //console.log(\"asds  \" + this.margin_top+\"  \"+this.margin_bottom);\r\n\r\n        this.boxPool = new cc.NodePool(\"BoxDrop\");\r\n\r\n        /*障碍物的方块列表*/\r\n        this.listBarrier = [];\r\n\r\n\r\n\r\n        this.replayGame();\r\n    },\r\n\r\n    //重新开始游戏\r\n    replayGame:function(){\r\n\r\n        this.gamestate = Game_State.Start;\r\n\r\n        var children = this.super_node.children;\r\n\r\n        while(children.length > 0){\r\n            \r\n            for (var i = 0; i < children.length; ++i) {\r\n                this.boxDrop_destroy(children[i].getComponent(\"BoxDrop\"));\r\n            }            \r\n        }\r\n\r\n        //清空ranklist\r\n        var item;\r\n        while (item = this.rankList.shift()) {\r\n            \r\n        }\r\n\r\n        console.log(\"清空成==========功======\");\r\n\r\n        //创建所有面板的数据\r\n        for(let index = 0; index<this.num_rank; index++){\r\n            this.createRankContent(index);\r\n        }\r\n\r\n        this.updateAllBeginOriginY();\r\n\r\n        this.checkPanelEliminatable();\r\n    },\r\n\r\n    /*创建障碍物 布局\r\n    * 1.在障碍物下面的物体把他清空\r\n    * 2.这个列的数量没有变还是这些数量\r\n    * */\r\n    createBarrierCanvas:function () {\r\n\r\n        // for (let i = 3; i<this.num_rank-3; i++){\r\n        //     let list = this.rankList[i];\r\n        //\r\n        //     let box = list[7];\r\n        //     let box_c = box.getComponent(\"BoxDrop\");\r\n        //     box_c.boxSpeciallyShow(BoxType.Barrier);\r\n        // }\r\n\r\n        /*  清空数组*/\r\n        this.listBarrier.splice(0,this.listBarrier.length);\r\n\r\n        let barrierList = [\r\n\r\n            {\"row\":7,\"rank\":2},{\"row\":6,\"rank\":2},\r\n            {\"row\":7,\"rank\":3},\r\n            {\"row\":7,\"rank\":4},\r\n            {\"row\":7,\"rank\":5},\r\n            {\"row\":7,\"rank\":6},\r\n            {\"row\":7,\"rank\":7},{\"row\":6,\"rank\":7},\r\n\r\n\r\n            {\"row\":2,\"rank\":2},{\"row\":3,\"rank\":2},\r\n            {\"row\":2,\"rank\":3},\r\n            {\"row\":2,\"rank\":6},\r\n            {\"row\":2,\"rank\":7},{\"row\":3,\"rank\":7},\r\n\r\n            ];\r\n\r\n        //将blank按row大小排序 从小到大 底部到顶部 排序底部到顶部\r\n        barrierList.sort(function (a,b) {\r\n            return a.row - b.row;\r\n        });\r\n\r\n        //设置是 barrier的方块类型\r\n        barrierList.forEach(function(ele){\r\n\r\n            let list = this.rankList[ele.rank];\r\n            let box = list[ele.row];\r\n            if(box !== undefined){\r\n                let box_c = box.getComponent(\"BoxDrop\");\r\n                this.listBarrier.push(box);\r\n                box_c.boxSpeciallyShow(BoxType.Barrier);\r\n            }\r\n\r\n        }.bind(this));\r\n\r\n        /*设置这个barrier下的方块*/\r\n        barrierList.forEach(function(ele){\r\n\r\n            let list = this.rankList[ele.rank];\r\n            for(let num_b = 0; num_b<ele.row;num_b++){\r\n\r\n                //这个位置设置成空白占位信息\r\n                let box = list[num_b];\r\n                if(box !== undefined) {\r\n                    let box_c = box.getComponent(\"BoxDrop\");\r\n                    if(box_c.boxItem.color_type < BoxType.TypeCount){\r\n                        box_c.boxSpeciallyShow(BoxType.Blank);\r\n                    }\r\n                }\r\n            }\r\n        }.bind(this));\r\n\r\n\r\n\r\n\r\n\r\n\r\n        this.blankBeginFill();\r\n    },\r\n\r\n\r\n    /*开始空位填充*/\r\n    blankBeginFill:function () {\r\n\r\n        /*看是否需要创建 方块 去填充占位方块*/\r\n\r\n        if(this.listBarrier.length === 0) {\r\n            //没有障碍物\r\n            return;\r\n        }\r\n\r\n        /*空缺的方块*/\r\n        let  listBlank = [];\r\n\r\n        //遍历出场景中所有的空位方块\r\n        // for(let b_i = 0; b_i < this.num_row; b_i++){\r\n        for(let b_i = 4; b_i < this.num_row; b_i++){\r\n            for(let b_j = 0; b_j < this.num_rank; b_j++){\r\n                let box = this.rankList[b_j][b_i];\r\n                if(box.getComponent(\"BoxDrop\").boxItem.color_type === BoxType.Blank){\r\n                    //这个位置是空缺的\r\n                    listBlank.push(box);\r\n                }\r\n            }\r\n        }\r\n\r\n        //对blank排序 从上到下 从右往左\r\n        listBlank.sort(function(boxa,boxb){\r\n\r\n            if(boxa.getComponent(\"BoxDrop\").boxItem.row === boxb.getComponent(\"BoxDrop\").boxItem.row){\r\n                return boxb.getComponent(\"BoxDrop\").boxItem.rank - boxa.getComponent(\"BoxDrop\").boxItem.rank;\r\n            }else {\r\n                return boxb.getComponent(\"BoxDrop\").boxItem.row - boxa.getComponent(\"BoxDrop\").boxItem.row;\r\n            }\r\n\r\n        });\r\n\r\n        if(listBlank.length === 0){\r\n            //无空缺位置\r\n            return;\r\n        }\r\n\r\n\r\n        for(let i = 0; i < listBlank.length; i++){\r\n\r\n            this.blankAviableFillItem(listBlank[i]);\r\n        }\r\n\r\n\r\n\r\n\r\n\r\n        //给这个障碍物下面补充方块\r\n        // for (let i = 0; i < this.listBarrier.length; i++){\r\n        //\r\n        //     let box = this.listBarrier[i];\r\n        //\r\n        //     this.blankCheckReplaceBlankAvailable(box);\r\n        // }\r\n    },\r\n\r\n\r\n    /* 填充这个方块\r\n    * 判断这个方块是否可填充\r\n    * 方向顺序 上 左 右*/\r\n    blankAviableFillItem:function (blank_box) {\r\n\r\n        let box_c = blank_box.getComponent(\"BoxDrop\");\r\n\r\n        let box_top = this.rankList[box_c.boxItem.rank][box_c.boxItem.row+1];\r\n        let box_topLeft = this.rankList[box_c.boxItem.rank-1][box_c.boxItem.row+1];\r\n        let box_topRight = this.rankList[box_c.boxItem.rank+1][box_c.boxItem.row+1];\r\n\r\n        let box_re = undefined;\r\n\r\n        //顶部是有方块可以填充\r\n        if(box_top !== undefined && box_top.getComponent(\"BoxDrop\").boxItem.color_type < BoxType.TypeCount){\r\n            box_re = box_top;\r\n        }\r\n        else if(box_topLeft !== undefined && box_topLeft.getComponent(\"BoxDrop\").boxItem.color_type < BoxType.TypeCount){\r\n            box_re = box_topLeft;\r\n        }\r\n        else if(box_topRight !== undefined && box_topRight.getComponent(\"BoxDrop\").boxItem.color_type < BoxType.TypeCount){\r\n            box_re = box_topRight;\r\n        }\r\n\r\n        if(box_re !== undefined){\r\n\r\n            return this.blankReplaceBox(blank_box,box_re);\r\n        }\r\n\r\n        return false;\r\n    },\r\n\r\n    /*替换方块 并执行替换切换的动画效果*/\r\n    blankReplaceBox :function (boxBlank,boxReplace) {\r\n\r\n        let box_re = boxReplace.getComponent(\"BoxDrop\");\r\n        let box_bl = boxBlank.getComponent(\"BoxDrop\");\r\n\r\n        //要取最后一个位置 来判断这个动画是够添加过\r\n        let lastPoint = box_re.boxItem.ani_point[box_re.boxItem.ani_point.length - 1];\r\n\r\n        //存储动画的节点\r\n        let isleft = box_bl.boxItem.begin_x < box_re.boxItem.begin_x;\r\n        if (lastPoint === undefined || lastPoint.x !== box_bl.boxItem.begin_x) {\r\n            box_re.boxItem.ani_point.push({\r\n                \"x\": box_bl.boxItem.begin_x,\r\n                \"y\": box_bl.boxItem.end_y + box_bl.node.height,\r\n                \"isleft\": isleft\r\n            });\r\n        }\r\n\r\n        let haveTop = (function () {\r\n            for(let i = box_re.boxItem.row+1; i < this.num_row; i++){\r\n                let b = this.rankList[box_re.boxItem.rank][i];\r\n                if(b.getComponent(BoxDrop).boxItem.color_type === BoxType.Barrier){\r\n                    return true;\r\n                }\r\n            }\r\n            return false;\r\n        }.bind(this))();\r\n\r\n\r\n        if(haveTop){\r\n\r\n        }else {\r\n\r\n            this.blankRemoveItemAtRank(boxReplace);\r\n        }\r\n\r\n\r\n        // let tempBeginx = box_re.boxItem.begin_x;\r\n        let tempEndy = box_re.boxItem.end_y;\r\n        let tempRow = box_re.boxItem.row;\r\n        let tempRank = box_re.boxItem.rank;\r\n\r\n        box_re.boxItem.begin_x = box_bl.boxItem.begin_x;\r\n        box_re.boxItem.end_y = box_bl.boxItem.end_y;\r\n        box_re.boxItem.row = box_bl.boxItem.row;\r\n        box_re.boxItem.rank = box_bl.boxItem.rank;\r\n\r\n        // box_bl.boxItem.begin_x = tempBeginx;\r\n        box_bl.boxItem.end_y = tempEndy;\r\n        box_bl.boxItem.row = tempRow;\r\n        box_bl.boxItem.rank = tempRank;\r\n\r\n\r\n        if(haveTop){\r\n            //这个位置的方块设置成空缺的状态\r\n            this.rankList[box_bl.boxItem.rank][box_bl.boxItem.row] = boxBlank;//.getComponent(\"BoxDrop\").boxSpeciallyShow(BoxType.Blank);\r\n            box_bl.resetOriginPos();\r\n\r\n            //从头开始重新遍历\r\n            return true;\r\n\r\n        }else {\r\n\r\n            //占位的方块 位置替换成要移入的方块  移除这个占位方块\r\n            this.rankList[box_re.boxItem.rank][box_re.boxItem.row] = boxReplace;\r\n\r\n            this.boxPool.put(box_bl.node);\r\n\r\n            return false;\r\n        }\r\n    },\r\n\r\n\r\n    blankRemoveItemAtRank:function (boxRemove) {\r\n\r\n        let box_re = boxRemove.getComponent(\"BoxDrop\");\r\n        let list = this.rankList[box_re.boxItem.rank];\r\n        list.removeByValue(list,boxRemove);\r\n\r\n        let new_box = this.updateRankEndYIndex(box_re.boxItem.rank);\r\n\r\n        if(new_box !== null){\r\n\r\n            let box_c = new_box.getComponent(\"BoxDrop\");\r\n            if(box_c.node.y !== box_c.boxItem.end_y){\r\n\r\n                if((this.gamestate === Game_State.Start) || (box_c.node.y >= box_c.boxItem.begin_y)){\r\n\r\n                    //他本身是最后一个 跟倒数第二个对比\r\n                    let last_box = list[list.length-2];\r\n                    if(last_box !== undefined){\r\n                        box_c.boxItem.begin_y = last_box.getComponent(\"BoxDrop\").boxItem.begin_y + box_c.node.height + 10*list.length;\r\n                    }\r\n                    else {\r\n                        box_c.boxItem.begin_y = this.margin_top + space_top;\r\n                        box_c.node.y = box_c.boxItem.begin_y;\r\n                    }\r\n                    box_c.node.y = box_c.boxItem.begin_y;\r\n                }\r\n\r\n                //是要掉落的\r\n                if(this.gamestate === Game_State.Play ||\r\n                    this.gamestate === Game_State.Filling ||\r\n                    this.gamestate === Game_State.Start){\r\n                    box_c.state_b = BoxState.EFalling;\r\n                }\r\n            }else{\r\n                box_c.state_b = BoxState.EFalled;\r\n            }\r\n\r\n        }\r\n    },\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    // /*检测是否可以替换\r\n    // * box_c 这个要操作的方块类型  是 障碍物\r\n    // * */\r\n    // blankCheckReplaceBlankAvailable : function (box) {\r\n    //\r\n    //     let box_c = box.getComponent(\"BoxDrop\");\r\n    //\r\n    //     if(box_c.boxItem.color_type === BoxType.Barrier){\r\n    //         //是障碍物\r\n    //\r\n    //         //这个障碍物的边界两边 物体是 边界 、障碍物、方块\r\n    //         let box_left = this.rankList[box_c.boxItem.rank-1][box_c.boxItem.row];\r\n    //         let box_Right = this.rankList[box_c.boxItem.rank+1][box_c.boxItem.row];\r\n    //         let box_bottom = this.rankList[box_c.boxItem.rank][box_c.boxItem.row-1];\r\n    //\r\n    //         //如果这个障碍物 上 左 右 都有其他的障碍物 这个障碍物不做处理 由他上方掉落的方块处理\r\n    //         // let haveRight = (function () {\r\n    //         //     for(let i = box_c.boxItem.rank+1; i < this.num_rank; i++){\r\n    //         //         let b = this.rankList[i][box_c.boxItem.row];\r\n    //         //         if(b.getComponent(BoxDrop).boxItem.color_type === BoxType.Barrier){\r\n    //         //             return true;\r\n    //         //         }\r\n    //         //     }\r\n    //         //     return false;\r\n    //         // }.bind(this))();\r\n    //         // let haveLeft = (function () {\r\n    //         //     for(let i = box_c.boxItem.rank-1; i >= 0; i--){\r\n    //         //         let b = this.rankList[i][box_c.boxItem.row];\r\n    //         //         if(b.getComponent(BoxDrop).boxItem.color_type === BoxType.Barrier){\r\n    //         //             return true;\r\n    //         //         }\r\n    //         //     }\r\n    //         //     return false;\r\n    //         // }.bind(this))();\r\n    //         let haveTop = (function () {\r\n    //             for(let i = box_c.boxItem.row+1; i < this.num_row; i++){\r\n    //                 let b = this.rankList[box_c.boxItem.rank][i];\r\n    //                 if(b.getComponent(BoxDrop).boxItem.color_type === BoxType.Barrier){\r\n    //                     return true;\r\n    //                 }\r\n    //             }\r\n    //             return false;\r\n    //         }.bind(this))();\r\n    //         //\r\n    //         // if(haveLeft && haveRight &&haveTop){\r\n    //         //     console.log(\"这个三面都有障碍物 \"+box_c.boxItem.rank +\"  \"+ box_c.boxItem.row);\r\n    //         //     // return;\r\n    //         // }else {\r\n    //         //     return;\r\n    //         // }\r\n    //\r\n    //\r\n    //         if(box_bottom !== undefined && box_bottom.getComponent(\"BoxDrop\").boxItem.color_type === BoxType.Blank){\r\n    //             //这个底部是空的 可以填充方块\r\n    //\r\n    //             //填充先 左再右\r\n    //             if(box_Right !== undefined && box_Right.getComponent(\"BoxDrop\").boxItem.color_type < BoxType.TypeCount){\r\n    //                 //右边位置掉落填充\r\n    //                 console.log(\"右边位置 往左边填充掉落填充\");\r\n    //\r\n    //                 //另外边界的那个障碍物\r\n    //                 let edgeOtherBox = this.blankGetBorderBarrierBox(box);\r\n    //\r\n    //                 //移除 左边这个要删除的 更新新的方块的开始位置信息\r\n    //                 this.blankRemoveItemAtRank(box_Right);\r\n    //\r\n    //                 //设置要替换的位置\r\n    //                 this.blankReplaceBox(box_bottom,box_Right,edgeOtherBox);\r\n    //\r\n    //                 this.blankCheckReplaceBlankAvailable(box);\r\n    //             }\r\n    //             else if(box_left !== undefined && box_left.getComponent(\"BoxDrop\").boxItem.color_type < BoxType.TypeCount){\r\n    //                 //左边位置掉落填充\r\n    //                 console.log(\"左边位置掉落填充 往右边填充掉落填充\");\r\n    //\r\n    //                 //另外边界的那个障碍物\r\n    //                 let edgeOtherBox = this.blankGetBorderBarrierBox(box);\r\n    //\r\n    //                 //移除 左边这个要删除的 更新新的方块的开始位置信息\r\n    //                 this.blankRemoveItemAtRank(box_left);\r\n    //\r\n    //                 //设置要替换的位置\r\n    //                 this.blankReplaceBox(box_bottom,box_left,edgeOtherBox);\r\n    //\r\n    //                 this.blankCheckReplaceBlankAvailable(box);\r\n    //\r\n    //             }\r\n    //         }\r\n    //     }\r\n    // },\r\n    //\r\n    // //或者这个障碍物相邻在一起 另外一边的障碍物\r\n    // blankGetBorderBarrierBox:function (box) {\r\n    //\r\n    //     let edge_b;// = undefined;\r\n    //\r\n    //     let box_c = box.getComponent(\"BoxDrop\");\r\n    //     let row = box_c.boxItem.row;\r\n    //     let rank = box_c.boxItem.rank;\r\n    //\r\n    //     //判断这个方块的右边有没有\r\n    //     for(let i = rank+1; i < this.num_rank; i++){\r\n    //\r\n    //         let b = this.rankList[i][row];\r\n    //         if(b.getComponent(BoxDrop).boxItem.color_type < BoxType.TypeCount){\r\n    //             break;\r\n    //         }else if(b.getComponent(BoxDrop).boxItem.color_type < BoxType.Blank){\r\n    //             edge_b = b;\r\n    //         }\r\n    //     }\r\n    //     //左边\r\n    //     for(let j = rank-1; j >= 0; j--){\r\n    //\r\n    //         let b = this.rankList[j][row];\r\n    //         if(b.getComponent(BoxDrop).boxItem.color_type < BoxType.TypeCount){\r\n    //             break;\r\n    //         }else if(b.getComponent(BoxDrop).boxItem.color_type < BoxType.Blank){\r\n    //             edge_b = b;\r\n    //         }\r\n    //     }\r\n    //\r\n    //     if(edge_b !== undefined){\r\n    //\r\n    //         let edge_rank = edge_b.getComponent(BoxDrop).boxItem.rank;\r\n    //         let edge_row = edge_b.getComponent(BoxDrop).boxItem.row;\r\n    //\r\n    //         //底下\r\n    //         for(let k = edge_row-1; k >= 0; k--){\r\n    //\r\n    //             let bb = this.rankList[edge_rank][k];\r\n    //             if(bb.getComponent(BoxDrop).boxItem.color_type < BoxType.TypeCount){\r\n    //                 break;\r\n    //             }else if(bb.getComponent(BoxDrop).boxItem.color_type < BoxType.Blank){\r\n    //                 edge_b = bb;\r\n    //             }\r\n    //         }\r\n    //     }\r\n    //\r\n    //     return edge_b;\r\n    // },\r\n    //\r\n    // /*检测是否可以替换\r\n    //  * box_c 这个要操作的方块类型  是 方块\r\n    //  * */\r\n    // blankCheckReplaceNormalAvailable : function (box,edgeOtherBox){\r\n    //\r\n    //     let box_c = box.getComponent(\"BoxDrop\");\r\n    //     if(box_c.boxItem.color_type < BoxType.TypeCount){\r\n    //         //是方块\r\n    //\r\n    //         //这个方块的 左下方 右下方 正下方 判断是否是空位\r\n    //         let box_bottom_left = this.rankList[box_c.boxItem.rank-1][box_c.boxItem.row-1];\r\n    //         let box_bottom_Right = this.rankList[box_c.boxItem.rank+1][box_c.boxItem.row-1];\r\n    //         let box_bottom_zheng = this.rankList[box_c.boxItem.rank][box_c.boxItem.row-1];\r\n    //         if(box_bottom_zheng !== undefined &&\r\n    //             box_bottom_zheng.getComponent(\"BoxDrop\").boxItem.color_type === BoxType.Blank) {\r\n    //             //正下方是空的 往正下方 替换\r\n    //             console.log(\"正下方是空的 往正下方 替换\");\r\n    //             this.blankReplaceBox(box_bottom_zheng,box,edgeOtherBox);\r\n    //             return false;\r\n    //         }else if(box_bottom_left !== undefined &&\r\n    //             box_bottom_left.getComponent(\"BoxDrop\").boxItem.color_type === BoxType.Blank){\r\n    //             //左下方是空的 往左下方 替换\r\n    //             console.log(\"左下方\");\r\n    //             this.blankReplaceBox(box_bottom_left,box,edgeOtherBox);\r\n    //             return false;\r\n    //         }else if(box_bottom_Right !== undefined &&\r\n    //             box_bottom_Right.getComponent(\"BoxDrop\").boxItem.color_type === BoxType.Blank){\r\n    //             //右下方是空的 往右下方 替换\r\n    //             console.log(\"右下方\");\r\n    //             this.blankReplaceBox(box_bottom_Right,box,edgeOtherBox);\r\n    //             return false;\r\n    //         }\r\n    //     }\r\n    //\r\n    //     return true;\r\n    // },\r\n    //\r\n    //\r\n    //\r\n    //\r\n    //\r\n    //\r\n    //\r\n    // /*替换方块 并执行替换切换的动画效果*/\r\n    // blankReplaceBox :function (boxBlank,boxReplace,edgeOtherBox){\r\n    //\r\n    //     let box_re = boxReplace.getComponent(\"BoxDrop\");\r\n    //     let box_bl = boxBlank.getComponent(\"BoxDrop\");\r\n    //\r\n    //\r\n    //     //设置x的位置变化的时候 点\r\n    //     // let repeatList = box_re.boxItem.ani_point.filter(function(elem){\r\n    //     //     return elem.x === box_bl.boxItem.begin_x;\r\n    //     // });\r\n    //\r\n    //     //要取最后一个位置 来判断这个动画是够添加过\r\n    //     let lastPoint = box_re.boxItem.ani_point[box_re.boxItem.ani_point.length - 1];\r\n    //\r\n    //     //存储动画的节点\r\n    //     let isleft = box_bl.boxItem.begin_x < box_re.boxItem.begin_x;\r\n    //     if(lastPoint === undefined || lastPoint.x !== box_bl.boxItem.begin_x){\r\n    //         box_re.boxItem.ani_point.push({\"x\": box_bl.boxItem.begin_x, \"y\": box_bl.boxItem.end_y + box_bl.node.height,\"isleft\":isleft});\r\n    //     }\r\n    //\r\n    //\r\n    //     box_re.boxItem.begin_x = box_bl.boxItem.begin_x;\r\n    //     box_re.boxItem.end_y = box_bl.boxItem.end_y;\r\n    //\r\n    //     // let temp_rank = box_re.boxItem.rank;\r\n    //\r\n    //     box_re.boxItem.row = box_bl.boxItem.row;\r\n    //     box_re.boxItem.rank = box_bl.boxItem.rank;\r\n    //\r\n    //     //这个方块继续往下替换\r\n    //     if(this.blankCheckReplaceNormalAvailable(boxReplace,edgeOtherBox)){\r\n    //         console.log(\"移动完成 替换=======\");\r\n    //\r\n    //         //占位的方块 位置替换成要移入的方块  移除这个占位方块\r\n    //         this.rankList[box_bl.boxItem.rank][box_bl.boxItem.row] = boxReplace;\r\n    //\r\n    //         this.boxPool.put(box_bl.node);\r\n    //     }\r\n    //\r\n    //\r\n    //     //后面遍历的时候把他移除掉\r\n    //     //this.rankList[temp_rank].removeByValue(this.rankList[temp_rank],boxReplace);\r\n    //\r\n    //\r\n    //     // boxDrop_destroy:function(box){\r\n    //     //\r\n    //     //     let list = this.rankList[box.boxItem.rank];\r\n    //     //\r\n    //     //     list.removeByValue(list,box.node);\r\n    //     //\r\n    //     //     this.boxPool.put(box.node);\r\n    //     // },\r\n    //\r\n    // },\r\n\r\n\r\n    // blankRemoveItemAtRank:function (boxRemove) {\r\n    //\r\n    //     let box_re = boxRemove.getComponent(\"BoxDrop\");\r\n    //     let list = this.rankList[box_re.boxItem.rank];\r\n    //     list.removeByValue(list,boxRemove);\r\n    //\r\n    //     let new_box = this.updateRankEndYIndex(box_re.boxItem.rank);\r\n    //\r\n    //     if(new_box !== null){\r\n    //\r\n    //         let box_c = new_box.getComponent(\"BoxDrop\");\r\n    //         if(box_c.node.y !== box_c.boxItem.end_y){\r\n    //\r\n    //             if((this.gamestate === Game_State.Start) || (box_c.node.y >= box_c.boxItem.begin_y)){\r\n    //\r\n    //                 //他本身是最后一个 跟倒数第二个对比\r\n    //                 let last_box = list[list.length-2];\r\n    //                 if(last_box !== undefined){\r\n    //                     box_c.boxItem.begin_y = last_box.getComponent(\"BoxDrop\").boxItem.begin_y + box_c.node.height + 10*list.length;\r\n    //                 }\r\n    //                 else {\r\n    //                     box_c.boxItem.begin_y = this.margin_top + space_top;\r\n    //                     box_c.node.y = box_c.boxItem.begin_y;\r\n    //                 }\r\n    //                 box_c.node.y = box_c.boxItem.begin_y;\r\n    //             }\r\n    //\r\n    //             //是要掉落的\r\n    //             if(this.gamestate === Game_State.Play ||\r\n    //                 this.gamestate === Game_State.Filling ||\r\n    //                 this.gamestate === Game_State.Start){\r\n    //                 box_c.state_b = BoxState.EFalling;\r\n    //             }\r\n    //         }else{\r\n    //             box_c.state_b = BoxState.EFalled;\r\n    //         }\r\n    //\r\n    //     }\r\n    // },\r\n    \r\n\r\n\r\n    //创建每一列的数据\r\n    createRankContent:function(index){\r\n\r\n        let rank_list = [];\r\n\r\n        let origin_x = this.margin_left + (this.itemWidth+this.itemSpace)*index;\r\n         \r\n        for(let i = 0; i < this.num_row; i++){\r\n\r\n            let box = this.boxDrop_get();\r\n            box.active = true;\r\n\r\n            box.width = this.itemWidth;\r\n            box.height = this.itemHeight;\r\n\r\n            let box_c = box.getComponent(\"BoxDrop\");\r\n            box_c.state_b = BoxState.ENormal;\r\n\r\n            box_c.initBoxItem();\r\n\r\n            box_c.boxItem.begin_x = origin_x;\r\n            box_c.boxItem.begin_y = this.margin_top;\r\n            box_c.boxItem.end_y = this.margin_bottom + (this.itemHeight+this.itemSpace)*(i+1);\r\n            box_c.boxItem.rank = index;\r\n            box_c.boxItem.row = i;\r\n\r\n            let count = BoxType.TypeCount;\r\n            box_c.boxItem.color_type = (cc.random0To1()*count) | 0;\r\n\r\n            box_c.resetOriginPos();\r\n\r\n            box.parent = this.super_node;\r\n\r\n            rank_list.push(box);\r\n        }\r\n\r\n        this.rankList.push(rank_list);\r\n\r\n\r\n    },\r\n\r\n    //更新所有列 end y的数据\r\n    updateAllRankEndY:function(){\r\n\r\n        if(this.gamestate !== Game_State.Start){\r\n\r\n            //不是初始化游戏的  填充 障碍物下方的方块\r\n            this.blankBeginFill();\r\n\r\n        }\r\n\r\n        //看该列的数量是否 小于 this.num_row  少于的话则补充\r\n        for(let i = 0; i<this.num_rank; i++){\r\n\r\n            this.updateRankEndYIndex(i);\r\n        }\r\n\r\n        this.updateAllBeginOriginY();\r\n\r\n        if(this.gamestate === Game_State.Start){\r\n            this.checkPanelEliminatable();\r\n        }\r\n    },\r\n\r\n    /*更新某列的数据*/\r\n    updateRankEndYIndex:function(index){\r\n\r\n        let createBox = null;\r\n\r\n        let origin_x = this.margin_left + (this.itemWidth+this.itemSpace)*index;\r\n\r\n        let list_sub = this.rankList[index];\r\n\r\n        while(list_sub.length < this.num_row){\r\n\r\n            let new_box = this.boxDrop_get();\r\n            new_box.active = true;\r\n            new_box.width = this.itemWidth;\r\n            new_box.height = this.itemHeight;\r\n\r\n            let box_c = new_box.getComponent(\"BoxDrop\");\r\n            box_c.state_b = BoxState.ENormal;\r\n\r\n            box_c.initBoxItem();\r\n\r\n            box_c.boxItem.begin_x = origin_x;\r\n            box_c.boxItem.begin_y = this.margin_top;\r\n            box_c.boxItem.rank = index;\r\n            box_c.boxItem.row = 0;\r\n            box_c.boxItem.color_type = (cc.random0To1()*5) | 0;\r\n            box_c.resetOriginPos();\r\n\r\n            new_box.parent = this.super_node;\r\n\r\n            list_sub.push(new_box);\r\n\r\n\r\n            createBox = new_box;\r\n        }\r\n\r\n\r\n        let end_box_y = this.margin_bottom;\r\n\r\n        //更新每个元素的end y 位置\r\n        for (let i = 0; i<list_sub.length; i++){\r\n\r\n            let item_box = list_sub[i];\r\n            let box_c = item_box.getComponent(\"BoxDrop\");\r\n            box_c.boxItem.row = i;\r\n            box_c.boxItem.end_y = this.margin_bottom + (this.itemHeight+this.itemSpace)*i;\r\n        }\r\n\r\n\r\n        return createBox;\r\n    },\r\n\r\n\r\n    /**\r\n     * 更新每一列他们中的每个元素的初始的origin y的值\r\n     */\r\n    updateAllBeginOriginY:function () {\r\n\r\n\r\n        /**\r\n         * 某一列中 从最后开始遍历返回\r\n         * 算出开始掉了的位置\r\n         */\r\n        for (let i = 0; i<this.num_rank; i++){\r\n            let list = this.rankList[i];\r\n\r\n            //判断是否 已达到他的endy 如果还未达到就是 正要掉落\r\n            let off_top = 0;\r\n            let space_top = 5;\r\n\r\n            for(let j = 0; j<this.num_row; j++){\r\n                let box = list[j];\r\n\r\n                let box_c = box.getComponent(\"BoxDrop\");\r\n                //box_c.boxItem.begin_y = this.margin_top;\r\n\r\n                if(box_c.node.y !== box_c.boxItem.end_y){\r\n\r\n                    /**\r\n                     * 1.实例游戏的时候 初始开始的位置\r\n                     * 2.消除的 方块不在界面中的设置他的开始位置 已在界面中的不去设置他\r\n                     */\r\n                    if(((this.gamestate === Game_State.Start) || (box_c.node.y >= box_c.boxItem.begin_y)) &&\r\n                        box_c.boxItem.color_type < BoxType.TypeCount){\r\n\r\n                        box_c.boxItem.begin_y = this.margin_top + off_top;\r\n\r\n                        box_c.node.y = box_c.boxItem.begin_y;\r\n\r\n                        off_top = off_top + box_c.node.height + space_top;\r\n\r\n                        space_top = space_top + 10;\r\n                    }\r\n\r\n                    //是要掉落的\r\n                    if(this.gamestate === Game_State.Play ||\r\n                        this.gamestate === Game_State.Filling ||\r\n                        this.gamestate === Game_State.Start){\r\n                        box_c.state_b = BoxState.EFalling;\r\n                    }\r\n                }else{\r\n                    box_c.state_b = BoxState.EFalled;\r\n                }\r\n            }\r\n        }\r\n    },\r\n\r\n\r\n    //交换两个方块的位置\r\n    exchangeBoxItem:function(box1,box2,toCheckViable = true){\r\n\r\n        let boxItem1 = box1.getComponent(\"BoxDrop\").boxItem;\r\n        let boxItem2 = box2.getComponent(\"BoxDrop\").boxItem;\r\n\r\n        if(boxItem1.rank === boxItem2.rank){\r\n            //同一列的\r\n            let list = this.rankList[boxItem1.rank];\r\n\r\n            //交换位置\r\n            let temp_endy = boxItem2.end_y;\r\n            boxItem2.end_y = boxItem1.end_y;\r\n            boxItem1.end_y = temp_endy;\r\n\r\n            box1.node.runAction(cc.moveTo(0.2,cc.p(boxItem1.begin_x,boxItem1.end_y)));\r\n            box2.node.runAction(cc.moveTo(0.2,cc.p(boxItem2.begin_x,boxItem2.end_y)));\r\n            // box1.node.y = boxItem1.end_y;\r\n            // box2.node.y = boxItem2.end_y;\r\n\r\n            //交换信息\r\n            let temp_row = boxItem2.row;\r\n\r\n            boxItem2.row = boxItem1.row;\r\n            boxItem1.row = temp_row;            \r\n\r\n            let temp_node = list[boxItem1.row];\r\n            list[boxItem1.row] = list[boxItem2.row];\r\n            list[boxItem2.row] = temp_node;\r\n\r\n\r\n\r\n        }else if(boxItem1.row === boxItem2.row){\r\n            //同一行的\r\n            let list1 = this.rankList[boxItem1.rank];\r\n            let list2 = this.rankList[boxItem2.rank];\r\n\r\n            //交换位置\r\n            let temp_beginx = boxItem2.begin_x;\r\n            boxItem2.begin_x = boxItem1.begin_x;\r\n            boxItem1.begin_x = temp_beginx;\r\n\r\n            box1.node.runAction(cc.moveTo(0.2,cc.p(boxItem1.begin_x,boxItem1.end_y)));\r\n            box2.node.runAction(cc.moveTo(0.2,cc.p(boxItem2.begin_x,boxItem2.end_y)));\r\n            // box1.node.y = boxItem1.end_y;\r\n            // box2.node.y = boxItem2.end_y;\r\n\r\n            //交换信息\r\n            let temp_rank = boxItem2.rank;\r\n            boxItem2.rank = boxItem1.rank;\r\n            boxItem1.rank = temp_rank;\r\n\r\n            let row_index = boxItem1.row;\r\n            let temp_node = list1[row_index];\r\n            list1[row_index] = list2[row_index];\r\n            list2[row_index] = temp_node;\r\n        }\r\n\r\n        \r\n        if(toCheckViable){\r\n\r\n            let isViable = this.checkPanelEliminatable();\r\n\r\n            if(!isViable){\r\n\r\n                //不可消除的话 位置再互换回来\r\n                console.log(\"不可消除\");\r\n                setTimeout(function() {\r\n                this.exchangeBoxItem(box2,box1,false);\r\n                }.bind(this), 300);\r\n            }\r\n        }\r\n    },\r\n\r\n    //检测面板所有方块 是否可消除\r\n    checkPanelEliminatable:function(){\r\n\r\n        let wipe_list = [];\r\n\r\n        //判断列 是否有三个以及三个以上的一样的色块连在一起\r\n        for (let i = 0; i<this.num_rank; i++){\r\n            let list = this.rankList[i];\r\n            let tempList = [];\r\n            let pre_box = null;\r\n            for(let j = 0; j<this.num_row; j++){\r\n                let box = list[j];\r\n                if(!pre_box){\r\n                    pre_box = box;\r\n                    tempList.push(box);\r\n                }else{\r\n                    let item_pre = pre_box.getComponent(\"BoxDrop\").boxItem;\r\n                    let item_box = box.getComponent(\"BoxDrop\").boxItem;\r\n\r\n                    let toAdd = false;\r\n                    /*颜色相同 并且是普通类型的颜色的时候*/\r\n                    if(item_pre.color_type === item_box.color_type &&\r\n                        item_pre.color_type < BoxType.TypeCount){\r\n                        tempList.push(box);\r\n                        if(j === (this.num_row-1)){\r\n                            toAdd = true;\r\n                        }\r\n                    }else{\r\n                        toAdd = true;\r\n                    }\r\n\r\n                    if(toAdd){\r\n                        if(tempList.length >= 3){\r\n                            //追加到wipe里面\r\n                            Array.prototype.push.apply(wipe_list,tempList);\r\n\r\n                        }\r\n                        //清空数组\r\n                        tempList = [];\r\n\r\n                        pre_box = box;\r\n                        tempList.push(box);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        function isRepeatItemInWipe(item){\r\n            for(let i = 0; i<wipe_list.length; i++){\r\n                if(wipe_list[i].getComponent(\"BoxDrop\").boxItem.id === item.getComponent(\"BoxDrop\").boxItem.id){\r\n                    return true;\r\n                }\r\n            }\r\n            return false;\r\n        }\r\n\r\n        //判断行 是否有三个以及三个以上的一样的色块连在一起\r\n        for (let i = 0; i<this.num_row; i++){\r\n            \r\n            let tempList = [];\r\n            let pre_box = null;\r\n            for(let j = 0; j<this.num_rank; j++){\r\n                let box = this.rankList[j][i];\r\n                if(!pre_box){\r\n                    pre_box = box;\r\n                    tempList.push(box);\r\n                }else{\r\n                    let item_pre = pre_box.getComponent(\"BoxDrop\").boxItem;\r\n                    let item_box = box.getComponent(\"BoxDrop\").boxItem;\r\n\r\n                    let toAdd = false;\r\n                    if(item_pre.color_type === item_box.color_type &&\r\n                        item_pre.color_type < BoxType.TypeCount){\r\n                        tempList.push(box);\r\n                        if(j === (this.num_rank-1)){\r\n                            toAdd = true;\r\n                        }\r\n                    }else{\r\n                        toAdd = true;\r\n                    }\r\n\r\n                    if(toAdd){\r\n                        if(tempList.length >= 3){\r\n                            //追加到wipe里面\r\n                            tempList.forEach(function(elem){\r\n\r\n                                if(!isRepeatItemInWipe(elem)){\r\n                                    wipe_list.push(elem);\r\n                                }\r\n\r\n\r\n                            });\r\n\r\n                        }\r\n                        //清空数组\r\n                        tempList = [];\r\n\r\n                        pre_box = box;\r\n                        tempList.push(box);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        if(wipe_list.length > 0){\r\n\r\n            let showDelayAnimation = true;\r\n            if(this.gamestate === Game_State.Start){\r\n                //不显示消除动画\r\n                showDelayAnimation = false;\r\n            }\r\n\r\n\r\n            //不是初始化的 停留一会儿再消除 让用户看到要消除了什么东西\r\n            this.schedule(function () {\r\n\r\n                //消除掉\r\n                // wipe_list.forEach(function(elem){\r\n                //\r\n                //     // let box = elem.getComponent(\"BoxDrop\");\r\n                //     // box.state_b = BoxState.EDestroy;\r\n                //     this.boxDrop_destroy(elem.getComponent(\"BoxDrop\"));\r\n                //\r\n                // }.bind(this));\r\n\r\n                wipe_list.forEach(function(elem){\r\n\r\n                    let box = elem.getComponent(\"BoxDrop\");\r\n\r\n                    if(this.gamestate !== Game_State.Start){\r\n\r\n                        let haveTop = (function () {\r\n                            for(let i = box.boxItem.row+1; i < this.num_row; i++){\r\n                                let b = this.rankList[box.boxItem.rank][i];\r\n                                if(b.getComponent(BoxDrop).boxItem.color_type === BoxType.Barrier){\r\n                                    return true;\r\n                                }\r\n                            }\r\n                            return false;\r\n                        }.bind(this))();\r\n\r\n                        if(haveTop){\r\n                            //如果这个方块顶部是有障碍物的话 这个方块不销毁 将它设置成 Blank类型\r\n                            box.boxSpeciallyShow(BoxType.Blank);\r\n                        }else {\r\n                            box.state_b = BoxState.EDestroy;\r\n                        }\r\n                    }\r\n                    else {\r\n                        box.state_b = BoxState.EDestroy;\r\n                    }\r\n\r\n                }.bind(this));\r\n\r\n                /**\r\n                 * 这边一个延迟\r\n                 如果游戏是 初始化的话不延迟\r\n                 不是初始化 start的 要等销毁动画完成之后再开始掉落\r\n                 */\r\n                this.schedule(function () {\r\n\r\n                    //有销毁在掉落\r\n                    if(this.gamestate !== Game_State.Start){\r\n                        //正在掉落填充\r\n                        this.gamestate = Game_State.Filling;\r\n                    }\r\n\r\n                    this.updateAllRankEndY();\r\n\r\n                }.bind(this),(this.gamestate !== Game_State.Start)?0.3:0,false);\r\n\r\n\r\n            }.bind(this),showDelayAnimation?0.3:0,false);\r\n\r\n            return true;\r\n        }\r\n\r\n        this.gamestate = Game_State.Play;\r\n\r\n        return false;\r\n    },\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    boxDrop_get:function(){\r\n\r\n        let box = null;\r\n        if(this.boxPool.size() > 0){\r\n            box = this.boxPool.get();\r\n        }else{\r\n            box = cc.instantiate(this.box_prefab);\r\n            box.getComponent(\"BoxDrop\").init();\r\n        }\r\n\r\n        return box;\r\n    },\r\n\r\n    boxDrop_destroy:function(box){\r\n\r\n        let list = this.rankList[box.boxItem.rank];\r\n        \r\n        list.removeByValue(list,box.node);\r\n\r\n        this.boxPool.put(box.node);\r\n    },\r\n\r\n\r\n\r\n\r\n    /*是否开启调试*/\r\n    gameShowDebugMessage:function () {\r\n\r\n        YHDebug = !YHDebug;\r\n\r\n    },\r\n\r\n\r\n    \r\n\r\n\r\n    // called every frame, uncomment this function to activate update callback\r\n    update: function (dt) {\r\n\r\n        if(this.gamestate === Game_State.Filling ||\r\n            this.gamestate === Game_State.Start){\r\n\r\n            let self = this;\r\n\r\n            if(this.fillInterval === 10){\r\n\r\n                this.fillInterval = 0;\r\n\r\n                console.log(\"======定时开始判断是否都已掉落到底部了 begin =====\");\r\n\r\n                for (let i = 0; i<self.num_rank; i++) {\r\n                    let list = self.rankList[i];\r\n\r\n                    for (let j = 0; j < self.num_row; j++) {\r\n                        let box = list[j];\r\n                        let box_c_i = box.getComponent(\"BoxDrop\");\r\n                        if(box_c_i.state_b !== BoxState.EFalled){\r\n                            return;\r\n                        }\r\n                    }\r\n                }\r\n\r\n\r\n                console.log(\"=========都到 掉落到底部了 检测是否可消除 end =========\");\r\n\r\n                this.gamestate = Game_State.Play;\r\n                self.checkPanelEliminatable();\r\n            }\r\n\r\n            this.fillInterval += 1;\r\n        }\r\n\r\n    },\r\n});\r\n\r\n\r\n"
  ]
}