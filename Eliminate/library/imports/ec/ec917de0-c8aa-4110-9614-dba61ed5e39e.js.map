{
  "version": 3,
  "sources": [
    "unknown"
  ],
  "names": [
    "BoxDrop",
    "require",
    "BoxItem",
    "BoxState",
    "Game_State",
    "BoxType",
    "cc",
    "Class",
    "extends",
    "Component",
    "properties",
    "box_prefab",
    "default",
    "type",
    "Prefab",
    "num_rank",
    "tooltip",
    "num_row",
    "super_node",
    "Node",
    "_gameState",
    "Start",
    "gamestate",
    "get",
    "set",
    "value",
    "Play",
    "updateAllBeginOriginY",
    "Filling",
    "fillInterval",
    "onLoad",
    "Array",
    "prototype",
    "removeByValue",
    "arr",
    "val",
    "i",
    "length",
    "splice",
    "rankList",
    "itemWidth",
    "itemHeight",
    "itemSpace",
    "margin_top",
    "height",
    "margin_bottom",
    "margin_left",
    "margin_right",
    "boxPool",
    "NodePool",
    "listBarrier",
    "replayGame",
    "children",
    "boxDrop_destroy",
    "getComponent",
    "item",
    "shift",
    "console",
    "log",
    "index",
    "createRankContent",
    "createBarrierCanvas",
    "checkPanelEliminatable",
    "barrierList",
    "sort",
    "a",
    "b",
    "row",
    "forEach",
    "ele",
    "list",
    "rank",
    "box",
    "undefined",
    "box_c",
    "push",
    "boxSpeciallyShow",
    "Barrier",
    "bind",
    "num_b",
    "boxItem",
    "color_type",
    "TypeCount",
    "Blank",
    "blankBeginFill",
    "listBlank",
    "b_i",
    "b_j",
    "listBlankRightToLeft",
    "slice",
    "listBlankLeftToRight",
    "boxa",
    "boxb",
    "blankAviableFillItem",
    "blank_box",
    "isLeftArrow",
    "box_top",
    "box_topLeft",
    "box_topRight",
    "box_re",
    "blankReplaceBox",
    "boxBlank",
    "boxReplace",
    "box_bl",
    "isleft",
    "begin_x",
    "ani_point",
    "end_y",
    "node",
    "tempBeginy",
    "begin_y",
    "haveTop",
    "blankTopBoxExit",
    "blankRemoveItemAtRank",
    "tempBeginx",
    "tempBeginY",
    "tempEndy",
    "tempRow",
    "tempRank",
    "put",
    "boxRemove",
    "new_box",
    "updateRankEndYIndex",
    "y",
    "last_box",
    "space_top",
    "state_b",
    "EFalling",
    "EFalled",
    "box_b",
    "rank_list",
    "origin_x",
    "boxDrop_get",
    "active",
    "width",
    "ENormal",
    "initBoxItem",
    "count",
    "random0To1",
    "resetOriginPos",
    "parent",
    "updateAllRankEndY",
    "createBox",
    "list_sub",
    "end_box_y",
    "item_box",
    "off_top",
    "j",
    "exchangeBoxItem",
    "box1",
    "box2",
    "toCheckViable",
    "boxItem1",
    "boxItem2",
    "temp_endy",
    "runAction",
    "moveTo",
    "p",
    "temp_row",
    "temp_node",
    "list1",
    "list2",
    "temp_beginx",
    "temp_rank",
    "row_index",
    "isViable",
    "setTimeout",
    "wipe_list",
    "tempList",
    "pre_box",
    "item_pre",
    "toAdd",
    "apply",
    "isRepeatItemInWipe",
    "id",
    "elem",
    "showDelayAnimation",
    "schedule",
    "EDestroy",
    "size",
    "instantiate",
    "init",
    "gameShowDebugMessage",
    "YHDebug",
    "update",
    "dt",
    "self",
    "box_c_i"
  ],
  "mappings": "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",
  "file": "unknown",
  "sourcesContent": [
    "\r\n\r\nvar BoxDrop = require(\"BoxDrop\");\r\nvar BoxItem = require(\"BoxItem\");\r\nvar BoxState = require(\"States\").BoxState;\r\nvar Game_State = require(\"States\").Game_State;\r\nvar BoxType = require(\"States\").BoxType;\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n\r\n        box_prefab:{\r\n            default:null,\r\n            type:cc.Prefab,\r\n        },\r\n\r\n        num_rank:{\r\n            default:10,\r\n            tooltip:\"列数\"\r\n        },\r\n\r\n        num_row:{\r\n            default:10,\r\n            tooltip:\"行数\"\r\n        },\r\n\r\n        super_node:{\r\n            default:null,\r\n            type:cc.Node,\r\n        },\r\n\r\n        _gameState:{\r\n            default:Game_State.Start,\r\n            type:Game_State,\r\n        },\r\n\r\n        gamestate:{\r\n            get:function () {\r\n                return this._gameState;\r\n            },\r\n            set:function (value) {\r\n\r\n                if(this._gameState !== value){\r\n\r\n                    // let tempBefore = this._gameState;\r\n                    //\r\n                    // if(tempBefore === Game_State.Start){\r\n                    //     //是刚实例游戏完之后\r\n                    //     //创建障碍物\r\n                    //     this.createBarrierCanvas();\r\n                    // }\r\n\r\n                    this._gameState = value;\r\n\r\n                    if(value === Game_State.Play){\r\n                        //开始掉落\r\n                        this.updateAllBeginOriginY();\r\n                    }else  if(value === Game_State.Filling){\r\n                        this.fillInterval = 0;\r\n                    }\r\n\r\n\r\n                }\r\n            },\r\n            type:Game_State\r\n        },\r\n\r\n    },\r\n\r\n    // use this for initialization\r\n    onLoad: function () {\r\n\r\n        Array.prototype.removeByValue = function(arr,val){\r\n\r\n            for (var i = 0; i<arr.length; i++){\r\n                if(arr[i] === val){\r\n                    arr.splice(i,1);\r\n                    break;\r\n                }\r\n            }\r\n        };\r\n\r\n\r\n        // Array.prototype.filterRepeat = function(){  \r\n        //     //直接定义结果数组  \r\n        //     var arr = [];\r\n        //     if(arr.length > 0){\r\n        //         arr.push(this[0]);\r\n        //     }\r\n\r\n        //     for(var i = 1; i < this.length; i++){    //从数组第二项开始循环遍历此数组  \r\n        //         //对元素进行判断：  \r\n        //         //如果数组当前元素在此数组中第一次出现的位置不是i  \r\n        //         //那么我们可以判断第i项元素是重复的，否则直接存入结果数组  \r\n        //         if(this.indexOf(this[i]) == i){  \r\n        //             arr.push(this[i]);  \r\n        //         }  \r\n        //     }  \r\n        //     return arr;  \r\n        // }  \r\n\r\n        this.rankList = [];\r\n\r\n        this.itemWidth = 100;\r\n        this.itemHeight = 100;\r\n\r\n        this.itemSpace = 5;\r\n\r\n        //this.margin_top = -(cc.director.getWinSize().height)*0.5 + this.itemHeight*this.num_row + this.itemSpace * (this.num_row - 1) + this.itemHeight*0.5;\r\n        //this.margin_bottom = -(cc.director.getWinSize().height)*0.5 - this.itemHeight*0.5;\r\n\r\n        this.margin_top = -(this.super_node.height)*0.5 + this.itemHeight*this.num_row + this.itemSpace * (this.num_row - 1) + this.itemHeight*0.5;\r\n        this.margin_bottom = -(this.super_node.height)*0.5 +  this.itemHeight*0.5;\r\n\r\n        this.margin_left =  -this.itemWidth*this.num_rank*0.5 + this.itemSpace*(this.num_rank*0.5-1);\r\n        this.margin_right = this.itemWidth * this.num_rank * 0.5 - this.itemSpace * (this.num_rank * 0.5 - 1);\r\n\r\n        //console.log(\"asds  \" + this.margin_top+\"  \"+this.margin_bottom);\r\n\r\n        this.boxPool = new cc.NodePool(\"BoxDrop\");\r\n\r\n        /*障碍物的方块列表*/\r\n        this.listBarrier = [];\r\n\r\n\r\n\r\n        this.replayGame();\r\n    },\r\n\r\n    //重新开始游戏\r\n    replayGame:function(){\r\n\r\n        this.gamestate = Game_State.Start;\r\n\r\n        var children = this.super_node.children;\r\n\r\n        while(children.length > 0){\r\n            \r\n            for (var i = 0; i < children.length; ++i) {\r\n                this.boxDrop_destroy(children[i].getComponent(\"BoxDrop\"));\r\n            }            \r\n        }\r\n\r\n        //清空ranklist\r\n        var item;\r\n        while (item = this.rankList.shift()) {\r\n            \r\n        }\r\n\r\n        console.log(\"清空成==========功======\");\r\n\r\n        //创建所有面板的数据\r\n        for(let index = 0; index<this.num_rank; index++){\r\n            this.createRankContent(index);\r\n        }\r\n\r\n        this.updateAllBeginOriginY();\r\n\r\n        this.createBarrierCanvas();\r\n\r\n        this.checkPanelEliminatable();\r\n    },\r\n\r\n    /*创建障碍物 布局\r\n    * 1.在障碍物下面的物体把他清空\r\n    * 2.这个列的数量没有变还是这些数量\r\n    * */\r\n    createBarrierCanvas:function () {\r\n\r\n        // for (let i = 3; i<this.num_rank-3; i++){\r\n        //     let list = this.rankList[i];\r\n        //\r\n        //     let box = list[7];\r\n        //     let box_c = box.getComponent(\"BoxDrop\");\r\n        //     box_c.boxSpeciallyShow(BoxType.Barrier);\r\n        // }\r\n\r\n        /*  清空数组*/\r\n        this.listBarrier.splice(0,this.listBarrier.length);\r\n\r\n        let barrierList = [\r\n\r\n            {\"row\":7,\"rank\":2},{\"row\":6,\"rank\":2},\r\n            {\"row\":7,\"rank\":3},\r\n            {\"row\":7,\"rank\":4},\r\n            {\"row\":7,\"rank\":5},\r\n            {\"row\":7,\"rank\":6},\r\n            {\"row\":7,\"rank\":7},{\"row\":6,\"rank\":7},\r\n\r\n\r\n            {\"row\":2,\"rank\":2},{\"row\":3,\"rank\":2},\r\n            {\"row\":2,\"rank\":3},\r\n            {\"row\":2,\"rank\":6},\r\n            {\"row\":2,\"rank\":7},{\"row\":3,\"rank\":7},\r\n\r\n            ];\r\n\r\n        //将blank按row大小排序 从小到大 底部到顶部 排序底部到顶部\r\n        barrierList.sort(function (a,b) {\r\n            return a.row - b.row;\r\n        });\r\n\r\n        //设置是 barrier的方块类型\r\n        barrierList.forEach(function(ele){\r\n\r\n            let list = this.rankList[ele.rank];\r\n            let box = list[ele.row];\r\n            if(box !== undefined){\r\n                let box_c = box.getComponent(\"BoxDrop\");\r\n                this.listBarrier.push(box);\r\n                box_c.boxSpeciallyShow(BoxType.Barrier);\r\n            }\r\n\r\n        }.bind(this));\r\n\r\n        /*设置这个barrier下的方块*/\r\n        barrierList.forEach(function(ele){\r\n\r\n            let list = this.rankList[ele.rank];\r\n            for(let num_b = 0; num_b<ele.row;num_b++){\r\n\r\n                //这个位置设置成空白占位信息\r\n                let box = list[num_b];\r\n                if(box !== undefined) {\r\n                    let box_c = box.getComponent(\"BoxDrop\");\r\n                    if(box_c.boxItem.color_type < BoxType.TypeCount){\r\n                        box_c.boxSpeciallyShow(BoxType.Blank);\r\n                    }\r\n                }\r\n            }\r\n        }.bind(this));\r\n\r\n\r\n        this.blankBeginFill();\r\n\r\n        this.checkPanelEliminatable();\r\n    },\r\n\r\n\r\n    /*开始空位填充*/\r\n    blankBeginFill:function () {\r\n\r\n        /*看是否需要创建 方块 去填充占位方块*/\r\n\r\n        if(this.listBarrier.length === 0) {\r\n            //没有障碍物\r\n            return;\r\n        }\r\n\r\n        /*空缺的方块*/\r\n        let listBlank = [];\r\n\r\n        //遍历出场景中所有的空位方块\r\n        // for(let b_i = 0; b_i < this.num_row; b_i++){\r\n        for(let b_i = 0; b_i < this.num_row; b_i++){\r\n            for(let b_j = 0; b_j < this.num_rank; b_j++){\r\n                let box = this.rankList[b_j][b_i];\r\n                if(box !== undefined &&  box.getComponent(\"BoxDrop\").boxItem.color_type === BoxType.Blank){\r\n                    //这个位置是空缺的\r\n                    listBlank.push(box);\r\n                }\r\n            }\r\n        }\r\n\r\n        let listBlankRightToLeft = listBlank.slice(0);\r\n        let listBlankLeftToRight = listBlank.slice(0);\r\n\r\n        //对blank排序 从上到下 从右往左\r\n        listBlankRightToLeft.sort(function(boxa,boxb){\r\n            if(boxa.getComponent(\"BoxDrop\").boxItem.row === boxb.getComponent(\"BoxDrop\").boxItem.row){\r\n                return boxb.getComponent(\"BoxDrop\").boxItem.rank - boxa.getComponent(\"BoxDrop\").boxItem.rank;\r\n            }else {\r\n                return boxb.getComponent(\"BoxDrop\").boxItem.row - boxa.getComponent(\"BoxDrop\").boxItem.row;\r\n            }\r\n        });\r\n        //对blank排序 从上到下 从左往右\r\n        listBlankLeftToRight.sort(function(boxa,boxb){\r\n            if(boxa.getComponent(\"BoxDrop\").boxItem.row === boxb.getComponent(\"BoxDrop\").boxItem.row){\r\n                return boxa.getComponent(\"BoxDrop\").boxItem.rank - boxb.getComponent(\"BoxDrop\").boxItem.rank;\r\n            }else {\r\n                return boxb.getComponent(\"BoxDrop\").boxItem.row - boxa.getComponent(\"BoxDrop\").boxItem.row;\r\n            }\r\n        });\r\n\r\n\r\n\r\n        if(listBlank.length === 0){\r\n            //无空缺位置\r\n            return;\r\n        }\r\n\r\n\r\n        for(let i = 0; i < listBlankRightToLeft.length; i++) {\r\n\r\n            if (this.blankAviableFillItem(listBlankRightToLeft[i],false)) {\r\n                this.blankBeginFill();\r\n                return;\r\n            }\r\n        }\r\n\r\n        for(let i = 0; i < listBlankLeftToRight.length; i++) {\r\n\r\n            if (this.blankAviableFillItem(listBlankLeftToRight[i],true)) {\r\n                this.blankBeginFill();\r\n                return;\r\n            }\r\n        }\r\n\r\n\r\n\r\n        //去掉可消除的选项\r\n        // this.checkPanelEliminatable();\r\n    },\r\n\r\n\r\n    /* 填充这个方块\r\n    * 判断这个方块是否可填充\r\n    * 方向顺序 上 左 右*/\r\n    blankAviableFillItem:function (blank_box,isLeftArrow) {\r\n\r\n        let box_c = blank_box.getComponent(\"BoxDrop\");\r\n\r\n        let box_top = this.rankList[box_c.boxItem.rank][box_c.boxItem.row+1];\r\n        let box_topLeft = this.rankList[box_c.boxItem.rank-1][box_c.boxItem.row+1];\r\n        let box_topRight = this.rankList[box_c.boxItem.rank+1][box_c.boxItem.row+1];\r\n\r\n        let box_re = undefined;\r\n\r\n        //顶部是有方块可以填充\r\n        if(box_top !== undefined && box_top.getComponent(\"BoxDrop\").boxItem.color_type < BoxType.TypeCount){\r\n            box_re = box_top;\r\n        }\r\n        else if(box_topLeft !== undefined && box_topLeft.getComponent(\"BoxDrop\").boxItem.color_type < BoxType.TypeCount && isLeftArrow){\r\n            box_re = box_topLeft;\r\n        }\r\n        else if(box_topRight !== undefined && box_topRight.getComponent(\"BoxDrop\").boxItem.color_type < BoxType.TypeCount && !isLeftArrow){\r\n            box_re = box_topRight;\r\n        }\r\n\r\n        if(box_re !== undefined){\r\n\r\n            //替换到 本身之前就是 空缺方块的位置 重新开始 填充\r\n            return this.blankReplaceBox(blank_box,box_re);\r\n        }\r\n\r\n        return false;\r\n    },\r\n\r\n    /*替换方块 并执行替换切换的动画效果*/\r\n    blankReplaceBox :function (boxBlank,boxReplace) {\r\n\r\n        let box_re = boxReplace.getComponent(\"BoxDrop\");\r\n        let box_bl = boxBlank.getComponent(\"BoxDrop\");\r\n\r\n        //要取最后一个位置 来判断这个动画是够添加过\r\n        // let lastPoint = box_re.boxItem.ani_point[box_re.boxItem.ani_point.length - 1];\r\n\r\n        //存储动画的节点\r\n        let isleft = box_bl.boxItem.begin_x < box_re.boxItem.begin_x;\r\n\r\n        box_re.boxItem.ani_point.push({\r\n            \"x\": box_bl.boxItem.begin_x,\r\n            \"y\": box_bl.boxItem.end_y + box_bl.node.height,\r\n            \"isleft\": isleft\r\n        });\r\n\r\n\r\n        // boxReplace.y = box_bl.boxItem.end_y + box_bl.node.height;\r\n        // boxReplace.x = box_bl.boxItem.begin_x;\r\n\r\n\r\n\r\n\r\n        let tempBeginy = box_re.boxItem.begin_y;\r\n\r\n        let haveTop = this.blankTopBoxExit(boxReplace);\r\n        if(!haveTop){\r\n            this.blankRemoveItemAtRank(boxReplace);\r\n        }\r\n\r\n\r\n        let tempBeginx = box_re.boxItem.begin_x;\r\n        let tempBeginY = box_re.boxItem.begin_y;\r\n        let tempEndy = box_re.boxItem.end_y;\r\n        let tempRow = box_re.boxItem.row;\r\n        let tempRank = box_re.boxItem.rank;\r\n\r\n        box_re.boxItem.begin_x = box_bl.boxItem.begin_x;\r\n        box_re.boxItem.begin_y = box_bl.boxItem.begin_y;\r\n        box_re.boxItem.end_y = box_bl.boxItem.end_y;\r\n        box_re.boxItem.row = box_bl.boxItem.row;\r\n        box_re.boxItem.rank = box_bl.boxItem.rank;\r\n\r\n        box_bl.boxItem.begin_x = tempBeginx;\r\n        box_bl.boxItem.end_y = tempEndy;\r\n        box_bl.boxItem.row = tempRow;\r\n        box_bl.boxItem.rank = tempRank;\r\n        box_bl.boxItem.begin_y = tempBeginy;\r\n        box_bl.boxItem.begin_y = tempBeginY;\r\n\r\n\r\n        if(haveTop){\r\n            //这个位置的方块设置成空缺的状态\r\n            //占位的方块 位置替换成要移入的方块  移除这个占位方块\r\n            this.rankList[box_re.boxItem.rank][box_re.boxItem.row] = boxReplace;\r\n            this.rankList[box_bl.boxItem.rank][box_bl.boxItem.row] = boxBlank;\r\n\r\n            box_bl.boxSpeciallyShow(BoxType.Blank);\r\n\r\n            //从头开始重新遍历\r\n            return true;\r\n\r\n        }else {\r\n\r\n            //占位的方块 位置替换成要移入的方块  移除这个占位方块\r\n            this.rankList[box_re.boxItem.rank][box_re.boxItem.row] = boxReplace;\r\n\r\n            this.boxPool.put(box_bl.node);\r\n\r\n            return false;\r\n        }\r\n    },\r\n\r\n\r\n    blankRemoveItemAtRank:function (boxRemove) {\r\n\r\n        let box_re = boxRemove.getComponent(\"BoxDrop\");\r\n        let list = this.rankList[box_re.boxItem.rank];\r\n        list.removeByValue(list,boxRemove);\r\n\r\n        let new_box = this.updateRankEndYIndex(box_re.boxItem.rank);\r\n\r\n        if(new_box !== null){\r\n\r\n            let box_c = new_box.getComponent(\"BoxDrop\");\r\n            if(box_c.node.y !== box_c.boxItem.end_y){\r\n\r\n                if((this.gamestate === Game_State.Start) || (box_c.node.y >= box_c.boxItem.begin_y)){\r\n\r\n                    //他本身是最后一个 跟倒数第二个对比\r\n                    let last_box = list[list.length-2];\r\n                    if(last_box !== undefined){\r\n                        box_c.boxItem.begin_y = last_box.getComponent(\"BoxDrop\").boxItem.begin_y + box_c.node.height + 10*list.length;\r\n                    }\r\n                    else {\r\n                        box_c.boxItem.begin_y = this.margin_top + space_top;\r\n                        box_c.node.y = box_c.boxItem.begin_y;\r\n                    }\r\n                    box_c.node.y = box_c.boxItem.begin_y;\r\n                }\r\n\r\n                //是要掉落的\r\n                if(this.gamestate === Game_State.Play ||\r\n                    this.gamestate === Game_State.Filling ||\r\n                    this.gamestate === Game_State.Start){\r\n                    box_c.state_b = BoxState.EFalling;\r\n                }\r\n            }else{\r\n                box_c.state_b = BoxState.EFalled;\r\n            }\r\n\r\n        }\r\n    },\r\n\r\n\r\n\r\n    blankTopBoxExit:function (box) {\r\n\r\n        let box_b = box.getComponent(\"BoxDrop\");\r\n\r\n        for(let i = box_b.boxItem.row+1; i < this.num_row; i++){\r\n            let b = this.rankList[box_b.boxItem.rank][i];\r\n            if(b !== undefined && b.getComponent(BoxDrop).boxItem.color_type === BoxType.Barrier){\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    },\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    // /*检测是否可以替换\r\n    // * box_c 这个要操作的方块类型  是 障碍物\r\n    // * */\r\n    // blankCheckReplaceBlankAvailable : function (box) {\r\n    //\r\n    //     let box_c = box.getComponent(\"BoxDrop\");\r\n    //\r\n    //     if(box_c.boxItem.color_type === BoxType.Barrier){\r\n    //         //是障碍物\r\n    //\r\n    //         //这个障碍物的边界两边 物体是 边界 、障碍物、方块\r\n    //         let box_left = this.rankList[box_c.boxItem.rank-1][box_c.boxItem.row];\r\n    //         let box_Right = this.rankList[box_c.boxItem.rank+1][box_c.boxItem.row];\r\n    //         let box_bottom = this.rankList[box_c.boxItem.rank][box_c.boxItem.row-1];\r\n    //\r\n    //         //如果这个障碍物 上 左 右 都有其他的障碍物 这个障碍物不做处理 由他上方掉落的方块处理\r\n    //         // let haveRight = (function () {\r\n    //         //     for(let i = box_c.boxItem.rank+1; i < this.num_rank; i++){\r\n    //         //         let b = this.rankList[i][box_c.boxItem.row];\r\n    //         //         if(b.getComponent(BoxDrop).boxItem.color_type === BoxType.Barrier){\r\n    //         //             return true;\r\n    //         //         }\r\n    //         //     }\r\n    //         //     return false;\r\n    //         // }.bind(this))();\r\n    //         // let haveLeft = (function () {\r\n    //         //     for(let i = box_c.boxItem.rank-1; i >= 0; i--){\r\n    //         //         let b = this.rankList[i][box_c.boxItem.row];\r\n    //         //         if(b.getComponent(BoxDrop).boxItem.color_type === BoxType.Barrier){\r\n    //         //             return true;\r\n    //         //         }\r\n    //         //     }\r\n    //         //     return false;\r\n    //         // }.bind(this))();\r\n    //         let haveTop = (function () {\r\n    //             for(let i = box_c.boxItem.row+1; i < this.num_row; i++){\r\n    //                 let b = this.rankList[box_c.boxItem.rank][i];\r\n    //                 if(b.getComponent(BoxDrop).boxItem.color_type === BoxType.Barrier){\r\n    //                     return true;\r\n    //                 }\r\n    //             }\r\n    //             return false;\r\n    //         }.bind(this))();\r\n    //         //\r\n    //         // if(haveLeft && haveRight &&haveTop){\r\n    //         //     console.log(\"这个三面都有障碍物 \"+box_c.boxItem.rank +\"  \"+ box_c.boxItem.row);\r\n    //         //     // return;\r\n    //         // }else {\r\n    //         //     return;\r\n    //         // }\r\n    //\r\n    //\r\n    //         if(box_bottom !== undefined && box_bottom.getComponent(\"BoxDrop\").boxItem.color_type === BoxType.Blank){\r\n    //             //这个底部是空的 可以填充方块\r\n    //\r\n    //             //填充先 左再右\r\n    //             if(box_Right !== undefined && box_Right.getComponent(\"BoxDrop\").boxItem.color_type < BoxType.TypeCount){\r\n    //                 //右边位置掉落填充\r\n    //                 console.log(\"右边位置 往左边填充掉落填充\");\r\n    //\r\n    //                 //另外边界的那个障碍物\r\n    //                 let edgeOtherBox = this.blankGetBorderBarrierBox(box);\r\n    //\r\n    //                 //移除 左边这个要删除的 更新新的方块的开始位置信息\r\n    //                 this.blankRemoveItemAtRank(box_Right);\r\n    //\r\n    //                 //设置要替换的位置\r\n    //                 this.blankReplaceBox(box_bottom,box_Right,edgeOtherBox);\r\n    //\r\n    //                 this.blankCheckReplaceBlankAvailable(box);\r\n    //             }\r\n    //             else if(box_left !== undefined && box_left.getComponent(\"BoxDrop\").boxItem.color_type < BoxType.TypeCount){\r\n    //                 //左边位置掉落填充\r\n    //                 console.log(\"左边位置掉落填充 往右边填充掉落填充\");\r\n    //\r\n    //                 //另外边界的那个障碍物\r\n    //                 let edgeOtherBox = this.blankGetBorderBarrierBox(box);\r\n    //\r\n    //                 //移除 左边这个要删除的 更新新的方块的开始位置信息\r\n    //                 this.blankRemoveItemAtRank(box_left);\r\n    //\r\n    //                 //设置要替换的位置\r\n    //                 this.blankReplaceBox(box_bottom,box_left,edgeOtherBox);\r\n    //\r\n    //                 this.blankCheckReplaceBlankAvailable(box);\r\n    //\r\n    //             }\r\n    //         }\r\n    //     }\r\n    // },\r\n    //\r\n    // //或者这个障碍物相邻在一起 另外一边的障碍物\r\n    // blankGetBorderBarrierBox:function (box) {\r\n    //\r\n    //     let edge_b;// = undefined;\r\n    //\r\n    //     let box_c = box.getComponent(\"BoxDrop\");\r\n    //     let row = box_c.boxItem.row;\r\n    //     let rank = box_c.boxItem.rank;\r\n    //\r\n    //     //判断这个方块的右边有没有\r\n    //     for(let i = rank+1; i < this.num_rank; i++){\r\n    //\r\n    //         let b = this.rankList[i][row];\r\n    //         if(b.getComponent(BoxDrop).boxItem.color_type < BoxType.TypeCount){\r\n    //             break;\r\n    //         }else if(b.getComponent(BoxDrop).boxItem.color_type < BoxType.Blank){\r\n    //             edge_b = b;\r\n    //         }\r\n    //     }\r\n    //     //左边\r\n    //     for(let j = rank-1; j >= 0; j--){\r\n    //\r\n    //         let b = this.rankList[j][row];\r\n    //         if(b.getComponent(BoxDrop).boxItem.color_type < BoxType.TypeCount){\r\n    //             break;\r\n    //         }else if(b.getComponent(BoxDrop).boxItem.color_type < BoxType.Blank){\r\n    //             edge_b = b;\r\n    //         }\r\n    //     }\r\n    //\r\n    //     if(edge_b !== undefined){\r\n    //\r\n    //         let edge_rank = edge_b.getComponent(BoxDrop).boxItem.rank;\r\n    //         let edge_row = edge_b.getComponent(BoxDrop).boxItem.row;\r\n    //\r\n    //         //底下\r\n    //         for(let k = edge_row-1; k >= 0; k--){\r\n    //\r\n    //             let bb = this.rankList[edge_rank][k];\r\n    //             if(bb.getComponent(BoxDrop).boxItem.color_type < BoxType.TypeCount){\r\n    //                 break;\r\n    //             }else if(bb.getComponent(BoxDrop).boxItem.color_type < BoxType.Blank){\r\n    //                 edge_b = bb;\r\n    //             }\r\n    //         }\r\n    //     }\r\n    //\r\n    //     return edge_b;\r\n    // },\r\n    //\r\n    // /*检测是否可以替换\r\n    //  * box_c 这个要操作的方块类型  是 方块\r\n    //  * */\r\n    // blankCheckReplaceNormalAvailable : function (box,edgeOtherBox){\r\n    //\r\n    //     let box_c = box.getComponent(\"BoxDrop\");\r\n    //     if(box_c.boxItem.color_type < BoxType.TypeCount){\r\n    //         //是方块\r\n    //\r\n    //         //这个方块的 左下方 右下方 正下方 判断是否是空位\r\n    //         let box_bottom_left = this.rankList[box_c.boxItem.rank-1][box_c.boxItem.row-1];\r\n    //         let box_bottom_Right = this.rankList[box_c.boxItem.rank+1][box_c.boxItem.row-1];\r\n    //         let box_bottom_zheng = this.rankList[box_c.boxItem.rank][box_c.boxItem.row-1];\r\n    //         if(box_bottom_zheng !== undefined &&\r\n    //             box_bottom_zheng.getComponent(\"BoxDrop\").boxItem.color_type === BoxType.Blank) {\r\n    //             //正下方是空的 往正下方 替换\r\n    //             console.log(\"正下方是空的 往正下方 替换\");\r\n    //             this.blankReplaceBox(box_bottom_zheng,box,edgeOtherBox);\r\n    //             return false;\r\n    //         }else if(box_bottom_left !== undefined &&\r\n    //             box_bottom_left.getComponent(\"BoxDrop\").boxItem.color_type === BoxType.Blank){\r\n    //             //左下方是空的 往左下方 替换\r\n    //             console.log(\"左下方\");\r\n    //             this.blankReplaceBox(box_bottom_left,box,edgeOtherBox);\r\n    //             return false;\r\n    //         }else if(box_bottom_Right !== undefined &&\r\n    //             box_bottom_Right.getComponent(\"BoxDrop\").boxItem.color_type === BoxType.Blank){\r\n    //             //右下方是空的 往右下方 替换\r\n    //             console.log(\"右下方\");\r\n    //             this.blankReplaceBox(box_bottom_Right,box,edgeOtherBox);\r\n    //             return false;\r\n    //         }\r\n    //     }\r\n    //\r\n    //     return true;\r\n    // },\r\n    //\r\n    //\r\n    //\r\n    //\r\n    //\r\n    //\r\n    //\r\n    // /*替换方块 并执行替换切换的动画效果*/\r\n    // blankReplaceBox :function (boxBlank,boxReplace,edgeOtherBox){\r\n    //\r\n    //     let box_re = boxReplace.getComponent(\"BoxDrop\");\r\n    //     let box_bl = boxBlank.getComponent(\"BoxDrop\");\r\n    //\r\n    //\r\n    //     //设置x的位置变化的时候 点\r\n    //     // let repeatList = box_re.boxItem.ani_point.filter(function(elem){\r\n    //     //     return elem.x === box_bl.boxItem.begin_x;\r\n    //     // });\r\n    //\r\n    //     //要取最后一个位置 来判断这个动画是够添加过\r\n    //     let lastPoint = box_re.boxItem.ani_point[box_re.boxItem.ani_point.length - 1];\r\n    //\r\n    //     //存储动画的节点\r\n    //     let isleft = box_bl.boxItem.begin_x < box_re.boxItem.begin_x;\r\n    //     if(lastPoint === undefined || lastPoint.x !== box_bl.boxItem.begin_x){\r\n    //         box_re.boxItem.ani_point.push({\"x\": box_bl.boxItem.begin_x, \"y\": box_bl.boxItem.end_y + box_bl.node.height,\"isleft\":isleft});\r\n    //     }\r\n    //\r\n    //\r\n    //     box_re.boxItem.begin_x = box_bl.boxItem.begin_x;\r\n    //     box_re.boxItem.end_y = box_bl.boxItem.end_y;\r\n    //\r\n    //     // let temp_rank = box_re.boxItem.rank;\r\n    //\r\n    //     box_re.boxItem.row = box_bl.boxItem.row;\r\n    //     box_re.boxItem.rank = box_bl.boxItem.rank;\r\n    //\r\n    //     //这个方块继续往下替换\r\n    //     if(this.blankCheckReplaceNormalAvailable(boxReplace,edgeOtherBox)){\r\n    //         console.log(\"移动完成 替换=======\");\r\n    //\r\n    //         //占位的方块 位置替换成要移入的方块  移除这个占位方块\r\n    //         this.rankList[box_bl.boxItem.rank][box_bl.boxItem.row] = boxReplace;\r\n    //\r\n    //         this.boxPool.put(box_bl.node);\r\n    //     }\r\n    //\r\n    //\r\n    //     //后面遍历的时候把他移除掉\r\n    //     //this.rankList[temp_rank].removeByValue(this.rankList[temp_rank],boxReplace);\r\n    //\r\n    //\r\n    //     // boxDrop_destroy:function(box){\r\n    //     //\r\n    //     //     let list = this.rankList[box.boxItem.rank];\r\n    //     //\r\n    //     //     list.removeByValue(list,box.node);\r\n    //     //\r\n    //     //     this.boxPool.put(box.node);\r\n    //     // },\r\n    //\r\n    // },\r\n\r\n\r\n    // blankRemoveItemAtRank:function (boxRemove) {\r\n    //\r\n    //     let box_re = boxRemove.getComponent(\"BoxDrop\");\r\n    //     let list = this.rankList[box_re.boxItem.rank];\r\n    //     list.removeByValue(list,boxRemove);\r\n    //\r\n    //     let new_box = this.updateRankEndYIndex(box_re.boxItem.rank);\r\n    //\r\n    //     if(new_box !== null){\r\n    //\r\n    //         let box_c = new_box.getComponent(\"BoxDrop\");\r\n    //         if(box_c.node.y !== box_c.boxItem.end_y){\r\n    //\r\n    //             if((this.gamestate === Game_State.Start) || (box_c.node.y >= box_c.boxItem.begin_y)){\r\n    //\r\n    //                 //他本身是最后一个 跟倒数第二个对比\r\n    //                 let last_box = list[list.length-2];\r\n    //                 if(last_box !== undefined){\r\n    //                     box_c.boxItem.begin_y = last_box.getComponent(\"BoxDrop\").boxItem.begin_y + box_c.node.height + 10*list.length;\r\n    //                 }\r\n    //                 else {\r\n    //                     box_c.boxItem.begin_y = this.margin_top + space_top;\r\n    //                     box_c.node.y = box_c.boxItem.begin_y;\r\n    //                 }\r\n    //                 box_c.node.y = box_c.boxItem.begin_y;\r\n    //             }\r\n    //\r\n    //             //是要掉落的\r\n    //             if(this.gamestate === Game_State.Play ||\r\n    //                 this.gamestate === Game_State.Filling ||\r\n    //                 this.gamestate === Game_State.Start){\r\n    //                 box_c.state_b = BoxState.EFalling;\r\n    //             }\r\n    //         }else{\r\n    //             box_c.state_b = BoxState.EFalled;\r\n    //         }\r\n    //\r\n    //     }\r\n    // },\r\n    \r\n\r\n\r\n    //创建每一列的数据\r\n    createRankContent:function(index){\r\n\r\n        let rank_list = [];\r\n\r\n        let origin_x = this.margin_left + (this.itemWidth+this.itemSpace)*index;\r\n         \r\n        for(let i = 0; i < this.num_row; i++){\r\n\r\n            let box = this.boxDrop_get();\r\n            box.active = true;\r\n\r\n            box.width = this.itemWidth;\r\n            box.height = this.itemHeight;\r\n\r\n            let box_c = box.getComponent(\"BoxDrop\");\r\n            box_c.state_b = BoxState.ENormal;\r\n\r\n            box_c.initBoxItem();\r\n\r\n            box_c.boxItem.begin_x = origin_x;\r\n            box_c.boxItem.begin_y = this.margin_top;\r\n            box_c.boxItem.end_y = this.margin_bottom + (this.itemHeight+this.itemSpace)*(i+1);\r\n            box_c.boxItem.rank = index;\r\n            box_c.boxItem.row = i;\r\n\r\n            let count = BoxType.TypeCount;\r\n            box_c.boxItem.color_type = (cc.random0To1()*count) | 0;\r\n\r\n            box_c.resetOriginPos();\r\n\r\n            box.parent = this.super_node;\r\n\r\n            rank_list.push(box);\r\n        }\r\n\r\n        this.rankList.push(rank_list);\r\n\r\n\r\n    },\r\n\r\n    //更新所有列 end y的数据\r\n    updateAllRankEndY:function(){\r\n\r\n        if(this.gamestate !== Game_State.Start){\r\n\r\n            //不是初始化游戏的  填充 障碍物下方的方块\r\n            this.blankBeginFill();\r\n\r\n        }\r\n\r\n        //看该列的数量是否 小于 this.num_row  少于的话则补充\r\n        for(let i = 0; i<this.num_rank; i++){\r\n\r\n            this.updateRankEndYIndex(i);\r\n        }\r\n\r\n        this.updateAllBeginOriginY();\r\n\r\n        if(this.gamestate === Game_State.Start){\r\n            this.checkPanelEliminatable();\r\n        }\r\n    },\r\n\r\n    /*更新某列的数据*/\r\n    updateRankEndYIndex:function(index){\r\n\r\n        let createBox = null;\r\n\r\n        let origin_x = this.margin_left + (this.itemWidth+this.itemSpace)*index;\r\n\r\n        let list_sub = this.rankList[index];\r\n\r\n        while(list_sub.length < this.num_row){\r\n\r\n            let new_box = this.boxDrop_get();\r\n            new_box.active = true;\r\n            new_box.width = this.itemWidth;\r\n            new_box.height = this.itemHeight;\r\n\r\n            let box_c = new_box.getComponent(\"BoxDrop\");\r\n            box_c.state_b = BoxState.ENormal;\r\n\r\n            box_c.initBoxItem();\r\n\r\n            box_c.boxItem.begin_x = origin_x;\r\n            box_c.boxItem.begin_y = this.margin_top;\r\n            box_c.boxItem.rank = index;\r\n            box_c.boxItem.row = 0;\r\n            box_c.boxItem.color_type = (cc.random0To1()*5) | 0;\r\n            box_c.resetOriginPos();\r\n\r\n            new_box.parent = this.super_node;\r\n\r\n            list_sub.push(new_box);\r\n\r\n\r\n            createBox = new_box;\r\n        }\r\n\r\n\r\n        let end_box_y = this.margin_bottom;\r\n\r\n        //更新每个元素的end y 位置\r\n        for (let i = 0; i<list_sub.length; i++){\r\n\r\n            let item_box = list_sub[i];\r\n            let box_c = item_box.getComponent(\"BoxDrop\");\r\n            box_c.boxItem.row = i;\r\n            box_c.boxItem.end_y = this.margin_bottom + (this.itemHeight+this.itemSpace)*i;\r\n        }\r\n\r\n\r\n        return createBox;\r\n    },\r\n\r\n\r\n    /**\r\n     * 更新每一列他们中的每个元素的初始的origin y的值\r\n     */\r\n    updateAllBeginOriginY:function () {\r\n\r\n\r\n        /**\r\n         * 某一列中 从最后开始遍历返回\r\n         * 算出开始掉了的位置\r\n         */\r\n        for (let i = 0; i<this.num_rank; i++){\r\n            let list = this.rankList[i];\r\n\r\n            //判断是否 已达到他的endy 如果还未达到就是 正要掉落\r\n            let off_top = 0;\r\n            let space_top = 5;\r\n\r\n            for(let j = 0; j<this.num_row; j++){\r\n                let box = list[j];\r\n\r\n                let box_c = box.getComponent(\"BoxDrop\");\r\n                //box_c.boxItem.begin_y = this.margin_top;\r\n\r\n                if(box_c.node.y !== box_c.boxItem.end_y){\r\n\r\n                    /**\r\n                     * 1.实例游戏的时候 初始开始的位置\r\n                     * 2.消除的 方块不在界面中的设置他的开始位置 已在界面中的不去设置他\r\n                     */\r\n                    if(((this.gamestate === Game_State.Start) || (box_c.node.y >= box_c.boxItem.begin_y)) &&\r\n                        box_c.boxItem.color_type < BoxType.TypeCount){\r\n\r\n                        box_c.boxItem.begin_y = this.margin_top + off_top;\r\n\r\n                        box_c.node.y = box_c.boxItem.begin_y;\r\n\r\n                        off_top = off_top + box_c.node.height + space_top;\r\n\r\n                        space_top = space_top + 10;\r\n                    }\r\n\r\n                    //是要掉落的\r\n                    if(this.gamestate === Game_State.Play ||\r\n                        this.gamestate === Game_State.Filling ||\r\n                        this.gamestate === Game_State.Start){\r\n                        box_c.state_b = BoxState.EFalling;\r\n                    }\r\n                }else{\r\n                    box_c.state_b = BoxState.EFalled;\r\n                }\r\n            }\r\n        }\r\n    },\r\n\r\n\r\n    //交换两个方块的位置\r\n    exchangeBoxItem:function(box1,box2,toCheckViable = true){\r\n\r\n        let boxItem1 = box1.getComponent(\"BoxDrop\").boxItem;\r\n        let boxItem2 = box2.getComponent(\"BoxDrop\").boxItem;\r\n\r\n        if(boxItem1.rank === boxItem2.rank){\r\n            //同一列的\r\n            let list = this.rankList[boxItem1.rank];\r\n\r\n            //交换位置\r\n            let temp_endy = boxItem2.end_y;\r\n            boxItem2.end_y = boxItem1.end_y;\r\n            boxItem1.end_y = temp_endy;\r\n\r\n            box1.node.runAction(cc.moveTo(0.2,cc.p(boxItem1.begin_x,boxItem1.end_y)));\r\n            box2.node.runAction(cc.moveTo(0.2,cc.p(boxItem2.begin_x,boxItem2.end_y)));\r\n            // box1.node.y = boxItem1.end_y;\r\n            // box2.node.y = boxItem2.end_y;\r\n\r\n            //交换信息\r\n            let temp_row = boxItem2.row;\r\n\r\n            boxItem2.row = boxItem1.row;\r\n            boxItem1.row = temp_row;            \r\n\r\n            let temp_node = list[boxItem1.row];\r\n            list[boxItem1.row] = list[boxItem2.row];\r\n            list[boxItem2.row] = temp_node;\r\n\r\n\r\n\r\n        }else if(boxItem1.row === boxItem2.row){\r\n            //同一行的\r\n            let list1 = this.rankList[boxItem1.rank];\r\n            let list2 = this.rankList[boxItem2.rank];\r\n\r\n            //交换位置\r\n            let temp_beginx = boxItem2.begin_x;\r\n            boxItem2.begin_x = boxItem1.begin_x;\r\n            boxItem1.begin_x = temp_beginx;\r\n\r\n            box1.node.runAction(cc.moveTo(0.2,cc.p(boxItem1.begin_x,boxItem1.end_y)));\r\n            box2.node.runAction(cc.moveTo(0.2,cc.p(boxItem2.begin_x,boxItem2.end_y)));\r\n            // box1.node.y = boxItem1.end_y;\r\n            // box2.node.y = boxItem2.end_y;\r\n\r\n            //交换信息\r\n            let temp_rank = boxItem2.rank;\r\n            boxItem2.rank = boxItem1.rank;\r\n            boxItem1.rank = temp_rank;\r\n\r\n            let row_index = boxItem1.row;\r\n            let temp_node = list1[row_index];\r\n            list1[row_index] = list2[row_index];\r\n            list2[row_index] = temp_node;\r\n        }\r\n\r\n        \r\n        if(toCheckViable){\r\n\r\n            let isViable = this.checkPanelEliminatable();\r\n\r\n            if(!isViable){\r\n\r\n                //不可消除的话 位置再互换回来\r\n                console.log(\"不可消除\");\r\n                setTimeout(function() {\r\n                this.exchangeBoxItem(box2,box1,false);\r\n                }.bind(this), 300);\r\n            }\r\n        }\r\n    },\r\n\r\n    //检测面板所有方块 是否可消除\r\n    checkPanelEliminatable:function(){\r\n\r\n        let wipe_list = [];\r\n\r\n        //判断列 是否有三个以及三个以上的一样的色块连在一起\r\n        for (let i = 0; i<this.num_rank; i++){\r\n            let list = this.rankList[i];\r\n            let tempList = [];\r\n            let pre_box = null;\r\n            for(let j = 0; j<this.num_row; j++){\r\n                let box = list[j];\r\n                if(!pre_box){\r\n                    pre_box = box;\r\n                    tempList.push(box);\r\n                }else{\r\n                    let item_pre = pre_box.getComponent(\"BoxDrop\").boxItem;\r\n                    let item_box = box.getComponent(\"BoxDrop\").boxItem;\r\n\r\n                    let toAdd = false;\r\n                    /*颜色相同 并且是普通类型的颜色的时候*/\r\n                    if(item_pre.color_type === item_box.color_type &&\r\n                        item_pre.color_type < BoxType.TypeCount){\r\n                        tempList.push(box);\r\n                        if(j === (this.num_row-1)){\r\n                            toAdd = true;\r\n                        }\r\n                    }else{\r\n                        toAdd = true;\r\n                    }\r\n\r\n                    if(toAdd){\r\n                        if(tempList.length >= 3){\r\n                            //追加到wipe里面\r\n                            Array.prototype.push.apply(wipe_list,tempList);\r\n\r\n                        }\r\n                        //清空数组\r\n                        tempList = [];\r\n\r\n                        pre_box = box;\r\n                        tempList.push(box);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        function isRepeatItemInWipe(item){\r\n            for(let i = 0; i<wipe_list.length; i++){\r\n                if(wipe_list[i].getComponent(\"BoxDrop\").boxItem.id === item.getComponent(\"BoxDrop\").boxItem.id){\r\n                    return true;\r\n                }\r\n            }\r\n            return false;\r\n        }\r\n\r\n        //判断行 是否有三个以及三个以上的一样的色块连在一起\r\n        for (let i = 0; i<this.num_row; i++){\r\n            \r\n            let tempList = [];\r\n            let pre_box = null;\r\n            for(let j = 0; j<this.num_rank; j++){\r\n                let box = this.rankList[j][i];\r\n                if(!pre_box){\r\n                    pre_box = box;\r\n                    tempList.push(box);\r\n                }else{\r\n                    let item_pre = pre_box.getComponent(\"BoxDrop\").boxItem;\r\n                    let item_box = box.getComponent(\"BoxDrop\").boxItem;\r\n\r\n                    let toAdd = false;\r\n                    if(item_pre.color_type === item_box.color_type &&\r\n                        item_pre.color_type < BoxType.TypeCount){\r\n                        tempList.push(box);\r\n                        if(j === (this.num_rank-1)){\r\n                            toAdd = true;\r\n                        }\r\n                    }else{\r\n                        toAdd = true;\r\n                    }\r\n\r\n                    if(toAdd){\r\n                        if(tempList.length >= 3){\r\n                            //追加到wipe里面\r\n                            tempList.forEach(function(elem){\r\n\r\n                                if(!isRepeatItemInWipe(elem)){\r\n                                    wipe_list.push(elem);\r\n                                }\r\n\r\n\r\n                            });\r\n\r\n                        }\r\n                        //清空数组\r\n                        tempList = [];\r\n\r\n                        pre_box = box;\r\n                        tempList.push(box);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        if(wipe_list.length > 0){\r\n\r\n            let showDelayAnimation = true;\r\n            if(this.gamestate === Game_State.Start){\r\n                //不显示消除动画\r\n                showDelayAnimation = false;\r\n            }\r\n\r\n\r\n            //不是初始化的 停留一会儿再消除 让用户看到要消除了什么东西\r\n            this.schedule(function () {\r\n\r\n                //消除掉\r\n                // wipe_list.forEach(function(elem){\r\n                //\r\n                //     // let box = elem.getComponent(\"BoxDrop\");\r\n                //     // box.state_b = BoxState.EDestroy;\r\n                //     this.boxDrop_destroy(elem.getComponent(\"BoxDrop\"));\r\n                //\r\n                // }.bind(this));\r\n\r\n                wipe_list.forEach(function(elem){\r\n\r\n                    let box = elem.getComponent(\"BoxDrop\");\r\n\r\n                    let haveTop = this.blankTopBoxExit(elem);\r\n\r\n                    if(haveTop){\r\n                        //如果这个方块顶部是有障碍物的话 这个方块不销毁 将它设置成 Blank类型\r\n                        box.boxSpeciallyShow(BoxType.Blank);\r\n                    }else {\r\n                        box.state_b = BoxState.EDestroy;\r\n                    }\r\n\r\n                }.bind(this));\r\n\r\n                /**\r\n                 * 这边一个延迟\r\n                 如果游戏是 初始化的话不延迟\r\n                 不是初始化 start的 要等销毁动画完成之后再开始掉落\r\n                 */\r\n                this.schedule(function () {\r\n\r\n                    //有销毁在掉落\r\n                    if(this.gamestate !== Game_State.Start){\r\n                        //正在掉落填充\r\n                        this.gamestate = Game_State.Filling;\r\n                    }\r\n\r\n                    this.updateAllRankEndY();\r\n\r\n                }.bind(this),(this.gamestate !== Game_State.Start)?0.3:0,false);\r\n\r\n\r\n            }.bind(this),showDelayAnimation?0.3:0,false);\r\n\r\n            return true;\r\n        }\r\n\r\n        this.gamestate = Game_State.Play;\r\n\r\n        return false;\r\n    },\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    boxDrop_get:function(){\r\n\r\n        let box = null;\r\n        if(this.boxPool.size() > 0){\r\n            box = this.boxPool.get();\r\n        }else{\r\n            box = cc.instantiate(this.box_prefab);\r\n            box.getComponent(\"BoxDrop\").init();\r\n        }\r\n\r\n        return box;\r\n    },\r\n\r\n    boxDrop_destroy:function(box){\r\n\r\n        let list = this.rankList[box.boxItem.rank];\r\n        \r\n        list.removeByValue(list,box.node);\r\n\r\n        this.boxPool.put(box.node);\r\n    },\r\n\r\n\r\n\r\n\r\n    /*是否开启调试*/\r\n    gameShowDebugMessage:function () {\r\n\r\n        YHDebug = !YHDebug;\r\n\r\n    },\r\n\r\n\r\n    \r\n\r\n\r\n    // called every frame, uncomment this function to activate update callback\r\n    update: function (dt) {\r\n\r\n        if(this.gamestate === Game_State.Filling ||\r\n            this.gamestate === Game_State.Start){\r\n\r\n            let self = this;\r\n\r\n            if(this.fillInterval === 10){\r\n\r\n                this.fillInterval = 0;\r\n\r\n                console.log(\"======定时开始判断是否都已掉落到底部了 begin =====\");\r\n\r\n                for (let i = 0; i<self.num_rank; i++) {\r\n                    let list = self.rankList[i];\r\n\r\n                    for (let j = 0; j < self.num_row; j++) {\r\n                        let box = list[j];\r\n                        let box_c_i = box.getComponent(\"BoxDrop\");\r\n                        if(box_c_i.state_b !== BoxState.EFalled){\r\n                            return;\r\n                        }\r\n                    }\r\n                }\r\n\r\n\r\n                console.log(\"=========都到 掉落到底部了 检测是否可消除 end =========\");\r\n\r\n                this.gamestate = Game_State.Play;\r\n                self.checkPanelEliminatable();\r\n            }\r\n\r\n            this.fillInterval += 1;\r\n        }\r\n\r\n    },\r\n});\r\n\r\n\r\n"
  ]
}